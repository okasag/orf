output <- list(forest, forest_info, pred_final, var_final, pred_class, honest_mse, honest_rps)
names(output) <- c("trainForests",  "forestInfo", "honestPredictions", "honestVariance", "predictedCategories", "honestMSE", "honestRPS")
# --------------------------------------------------------------------------------------- #
###########################################################################################
#            Estimations without margins above, Estimations with margins under            #
###########################################################################################
# --------------------------------------------------------------------------------------- #
} else if (honesty == FALSE & inference == FALSE & margins == TRUE) {
# --------------------------------------------------------------------------------------- #
# put warning that marginal effects are preffered with honesty
warning("Estimation of marginal effects without honesty might not be optimal.")
# --------------------------------------------------------------------------------------- #
# do the estimation of probabilities as usual
# --------------------------------------------------------------------------------------- #
# no honest splitting, i.e. use all data
train_data <- dat
honest_data <- NULL
## create variables needed for orf estimations
# create indicator variables (outcomes)
Y_ind <- lapply(cat, function(x) ifelse((Y <= x), 1, 0))
# create dataset for ranger estimation
data_ind <- lapply(Y_ind, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X)))
# --------------------------------------------------------------------------------------- #
# estimate ncat-1 forests (everything on the same data: placing splits and effect estimation), no subsampling
forest <- lapply(data_ind, function(x) ranger(dependent.variable.name = paste(Y_name), data = x,
num.trees = ntree, mtry = mtry, replace = TRUE,
importance = "none"))
# --------------------------------------------------------------------------------------- #
# collect predictions for each forest based on whole sample (oob predictions)
pred <- lapply(forest, function(x) x$predictions) # collect forest predictions
# add the probability for the last outcome (always 1)
pred_1 <- append(pred, list(rep(1, n)))
# prepend zero vector to predictions for later differencing
pred_0 <- append(list(rep(0, n)), pred) # append a first 0 elemnt for the list
# --------------------------------------------------------------------------------------- #
# total predictions (make sure it returns a list)
pred_total <- as.list(mapply(function(x,y) x-y, pred_1, pred_0, SIMPLIFY = F))
# avoid negative predictions
pred_total <- lapply(pred_total, function(x) ifelse((x < 0), 0, x))
# coerce to final matrix
pred_total <- sapply(pred_total, function(x) as.matrix(x))
# normalize predictions
pred_final <- matrix(apply(pred_total, 1, function(x) (x)/(sum(x))), ncol = ncat, byrow = T)
# add names
colnames(pred_final) <- sapply(categories, function(x) paste("Category", x, sep = " "))
# compute OOB MSE based on whole sample
oob_mse <- mse(pred_final, Y)
# compute OOB RPS based on whole sample
oob_rps <- rps(pred_final, Y)
# --------------------------------------------------------------------------------------- #
## convert probabilities into class predictions ("classification")
pred_class <- as.matrix(apply(pred_final, 1, which.max))
colnames(pred_class) <- "Category"
# --------------------------------------------------------------------------------------- #
## now compute marginal effects at mean (without honesty and without inference - not optimal!)
# --------------------------------------------------------------------------------------- #
marginal_effects <- orf_margins(forest, data_ind, honesty, inference)
# --------------------------------------------------------------------------------------- #
# save forest information
forest_info <- list(inputs, train_data, honest_data, categories, data_ind)
names(forest_info) <- c("inputs", "trainData", "honestData", "categories", "indicatorData")
# define output of the function
output <- list(forest, forest_info, pred_final, pred_class, oob_mse, oob_rps, marginal_effects)
names(output) <- c("trainForests",  "forestInfo", "oobPredictions", "predictedCategories", "oobMSE", "oobRPS", "marginalEffects")
# -------------------------------------------------------------------------------- #
} else if (honesty == TRUE & inference == FALSE & margins == TRUE) {
# --------------------------------------------------------------------------------------- #
# do the estimation of probabilities as usual
# --------------------------------------------------------------------------------------- #
## do honest forest estimation here using 50:50 data split as in Lechner (2018)
# devide into 50:50 honesty sets
split_data <- honest_split(dat)
# take care of train data
train_data <- split_data$trainData # take out training data
rows_train_data <- as.numeric(rownames(train_data)) # take rownames of train data as numeric
Y_train <- as.matrix(train_data[, 1]) # take out Y train
colnames(Y_train) <- Y_name # add column name
X_train <- train_data[, -1] # take out X
colnames(X_train) <- X_name # add column names
# take care of honest data
honest_data <- split_data$honestData # take out honest data
rows_honest_data <- as.numeric(rownames(honest_data)) # take rownames of train data as numeric
Y_honest <- as.matrix(honest_data[, 1]) # take out Y train
colnames(Y_honest) <- Y_name # add column name
X_honest <- honest_data[, -1] # take out X
colnames(X_honest) <- X_name # add column names
# --------------------------------------------------------------------------------------- #
## create variables needed for orf estimations
# create indicator variables (outcomes)
Y_ind_train <- lapply(cat, function(x) ifelse((Y_train <= x), 1, 0)) # train
Y_ind_honest <- lapply(cat, function(x) ifelse((Y_honest <= x), 1, 0))
# create dataset for ranger estimation
data_ind_train <- lapply(Y_ind_train, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X_train)))
data_ind_honest <- lapply(Y_ind_honest, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X_honest)))
# --------------------------------------------------------------------------------------- #
# estimate ncat-1 forests (everything on the same data: placing splits and effect estimation), no subsampling
forest <- lapply(data_ind_train, function(x) ranger(dependent.variable.name = paste(Y_name), data = x,
num.trees = ntree, mtry = mtry, replace = FALSE,
sample.fraction = 0.5, importance = "none"))
# --------------------------------------------------------------------------------------- #
# compute honest predictions based on honest sample
pred <- mapply(function(x,y,z) get_honest(x, y, z), forest, data_ind_honest, data_ind_train, SIMPLIFY = F)
# add the probability for the last outcome (always 1)
pred_1 <- append(pred, list(rep(1, n)))
# prepend zero vector to predictions for later differencing
pred_0 <- append(list(rep(0, n)), pred) # append a first 0 elemnt for the list
# --------------------------------------------------------------------------------------- #
# total predictions (make sure it returns a list)
pred_total <- as.list(mapply(function(x,y) x-y, pred_1, pred_0, SIMPLIFY = F))
# avoid negative predictions
pred_total <- lapply(pred_total, function(x) ifelse((x < 0), 0, x))
# coerce to final matrix
pred_total <- sapply(pred_total, function(x) as.matrix(x))
# normalize predictions
pred_final <- matrix(apply(pred_total, 1, function(x) (x)/(sum(x))), ncol = ncat, byrow = T)
# add names
colnames(pred_final) <- sapply(categories, function(x) paste("Category", x, sep = " "))
# compute OOB MSE based on whole sample
honest_mse <- mse(pred_final, Y)
# compute OOB RPS based on whole sample
honest_rps <- rps(pred_final, Y)
# --------------------------------------------------------------------------------------- #
## convert probabilities into class predictions ("classification")
pred_class <- as.matrix(apply(pred_final, 1, which.max))
colnames(pred_class) <- "Category"
# --------------------------------------------------------------------------------------- #
## now compute marginal effects at mean (with honesty and without inference)
# --------------------------------------------------------------------------------------- #
marginal_effects <- orf_margins(forest, data_ind_honest, honesty, inference)
# --------------------------------------------------------------------------------------- #
# save forest information
forest_info <- list(inputs, train_data, honest_data, categories, data_ind_honest)
names(forest_info) <- c("inputs", "trainData", "honestData", "categories", "indicatorData")
# define output of the function
output <- list(forest, forest_info, pred_final, pred_class, honest_mse, honest_rps, marginal_effects)
names(output) <- c("trainForests",  "forestInfo", "honestPredictions", "predictedCategories", "honestMSE", "honestRPS", "marginalEffects")
# -------------------------------------------------------------------------------- #
} else if (honesty == TRUE & inference == TRUE & margins == TRUE) {
# --------------------------------------------------------------------------------------- #
## do honest forest estimation here using 50:50 data split as in Lechner (2018)
# devide into 50:50 honesty sets
split_data <- honest_split(dat)
# take care of train data
train_data <- split_data$trainData # take out training data
rows_train_data <- as.numeric(rownames(train_data)) # take rownames of train data as numeric
Y_train <- as.matrix(train_data[, 1]) # take out Y train
colnames(Y_train) <- Y_name # add column name
X_train <- train_data[, -1] # take out X
colnames(X_train) <- X_name # add column names
# take care of honest data
honest_data <- split_data$honestData # take out honest data
rows_honest_data <- as.numeric(rownames(honest_data)) # take rownames of train data as numeric
Y_honest <- as.matrix(honest_data[, 1]) # take out Y train
colnames(Y_honest) <- Y_name # add column name
X_honest <- honest_data[, -1] # take out X
colnames(X_honest) <- X_name # add column names
# --------------------------------------------------------------------------------------- #
## create variables needed for orf estimations
# create indicator variables (outcomes)
Y_ind_train <- lapply(cat, function(x) ifelse((Y_train <= x), 1, 0)) # train
Y_ind_honest <- lapply(cat, function(x) ifelse((Y_honest <= x), 1, 0))
# create dataset for ranger estimation
data_ind_train <- lapply(Y_ind_train, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X_train)))
data_ind_honest <- lapply(Y_ind_honest, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X_honest)))
# --------------------------------------------------------------------------------------- #
# estimate ncat-1 forests (everything on the same data: placing splits and effect estimation), no subsampling
forest <- lapply(data_ind_train, function(x) ranger(dependent.variable.name = paste(Y_name), data = x,
num.trees = ntree, mtry = mtry, replace = FALSE,
sample.fraction = 0.5, importance = "none"))
# --------------------------------------------------------------------------------------- #
# get honest weights
forest_weights <- mapply(function(x,y,z) get_forest_weights(x, y, z), forest, data_ind_honest, data_ind_train, SIMPLIFY = F)
honest_weights <- lapply(forest_weights, function(x) x[rows_honest_data, ]) # take out honest sample honest weights
train_weights <- lapply(forest_weights, function(x) x[rows_train_data, ]) # take out train sample honest weights
# --------------------------------------------------------------------------------------- #
## make honest predictions, i.e. fitted values based on honest sample
# honest sample predictions
honest_pred <- mapply(function(x,y) as.matrix(x %*% y[, 1]), honest_weights, data_ind_honest, SIMPLIFY = F) # honest weights for honest data
#rownames(honest_pred) <- rows_honest_data
# train sample predictions
train_pred <- mapply(function(x,y) as.matrix(x %*% y[, 1]), train_weights, data_ind_honest, SIMPLIFY = F) # honest weights for train data
#rownames(train_pred) <- rows_train_data
# put the prediction together for whole sample and order them as original data
forest_pred <- mapply(function(x,y) rbind(x, y), honest_pred, train_pred, SIMPLIFY = F)
# sort according to rownames
forest_pred <- lapply(forest_pred, function(x) as.numeric(x[order(as.numeric(row.names(x))), ]))
# add the probability for the last outcome (always 1)
pred_1 <- append(forest_pred, list(rep(1, n)))
# prepend zero vector to predictions for later differencing
pred_0 <- append(list(rep(0, n)), forest_pred) # append a first 0 elemnt for the list
# --------------------------------------------------------------------------------------- #
# total predictions (make sure it returns a list)
pred_total <- as.list(mapply(function(x,y) x-y, pred_1, pred_0, SIMPLIFY = F))
# avoid negative predictions
pred_total <- lapply(pred_total, function(x) ifelse((x < 0), 0, x))
# coerce to final matrix
pred_total <- sapply(pred_total, function(x) as.matrix(x))
# normalize predictions
pred_final <- matrix(apply(pred_total, 1, function(x) (x)/(sum(x))), ncol = ncat, byrow = T)
# add names
colnames(pred_final) <- sapply(categories, function(x) paste("Category", x, sep = " "))
# compute OOB MSE based on whole sample
honest_mse <- mse(pred_final, Y)
# compute OOB RPS based on whole sample
honest_rps <- rps(pred_final, Y)
# --------------------------------------------------------------------------------------- #
## convert probabilities into class predictions ("classification")
pred_class <- as.matrix(apply(pred_final, 1, which.max))
colnames(pred_class) <- "Category"
# --------------------------------------------------------------------------------------- #
# compute the variances for the categorical predictions
var_final <- get_orf_variance(honest_pred, honest_weights, train_pred, train_weights, Y_ind_honest)
# check for normalization
#sd_final <- sqrt(var_final)
# --------------------------------------------------------------------------------------- #
## now compute marginal effects at mean (with honesty and with inference - default)
# --------------------------------------------------------------------------------------- #
marginal_effects <- orf_margins(forest, data_ind_honest, honesty, inference)
# --------------------------------------------------------------------------------------- #
# save forest information
forest_info <- list(inputs, train_data, honest_data, categories, data_ind_honest)
names(forest_info) <- c("inputs", "trainData", "honestData", "categories", "indicatorData")
# define output of the function
output <- list(forest, forest_info, pred_final, var_final, pred_class, honest_mse, honest_rps, marginal_effects)
names(output) <- c("trainForests",  "forestInfo", "honestPredictions", "honestVariance", "predictedCategories", "honestMSE", "honestRPS", "marginalEffects")
}
## save the inputs:
inputs <- list(ntree, mtry, honesty, inference, margins)
names(inputs) <- c("ntree", "mtry", "honesty", "inference", "margins")
## save colnames
# Y - numeric response as only regression is supported (so far)
Y <- as.matrix(as.numeric(Y)) # make sure you can add colname
if (is.null(colnames(Y))) { colnames(Y) <- "Y" } # check if Y has name
Y_name <- colnames(Y) # save the name of Y
# X
if (is.null(colnames(X))) { colnames(X) <- paste0("X", rep(1:ncol(X))) } # check if X has name
X_name <- colnames(X) # save the name of X
## set needed dataframe and local variables
dat <- as.data.frame(cbind(Y, X)) # dataframe
colnames(dat) <- c(Y_name, X_name) # column names
n <- as.numeric(nrow(dat)) # number of observations
# parameters (categories)
categories <- as.numeric(sort(unique(Y))) # sequence of categories
ncat <- as.numeric(length(categories)) # number of categories
cat <- categories[1:(ncat-1)] # cat to esi
## do honest forest estimation here using 50:50 data split as in Lechner (2018)
# devide into 50:50 honesty sets
split_data <- honest_split(dat)
# take care of train data
train_data <- split_data$trainData # take out training data
rows_train_data <- as.numeric(rownames(train_data)) # take rownames of train data as numeric
Y_train <- as.matrix(train_data[, 1]) # take out Y train
colnames(Y_train) <- Y_name # add column name
X_train <- train_data[, -1] # take out X
colnames(X_train) <- X_name # add column names
# take care of honest data
honest_data <- split_data$honestData # take out honest data
rows_honest_data <- as.numeric(rownames(honest_data)) # take rownames of train data as numeric
Y_honest <- as.matrix(honest_data[, 1]) # take out Y train
colnames(Y_honest) <- Y_name # add column name
X_honest <- honest_data[, -1] # take out X
colnames(X_honest) <- X_name # add column na
## create variables needed for orf estimations
# create indicator variables (outcomes)
Y_ind_train <- lapply(cat, function(x) ifelse((Y_train <= x), 1, 0)) # train
Y_ind_honest <- lapply(cat, function(x) ifelse((Y_honest <= x), 1, 0))
# create dataset for ranger estimation
data_ind_train <- lapply(Y_ind_train, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X_train)))
data_ind_honest <- lapply(Y_ind_honest, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X_honest)))
# estimate ncat-1 forests (everything on the same data: placing splits and effect estimation), no subsampling
forest <- lapply(data_ind_train, function(x) ranger(dependent.variable.name = paste(Y_name), data = x,
num.trees = ntree, mtry = mtry, replace = FALSE,
sample.fraction = 0.5, importance = "none"))
# compute honest predictions based on honest sample
pred <- mapply(function(x,y,z) get_honest(x, y, z), forest, data_ind_honest, data_ind_train, SIMPLIFY = F)
# add the probability for the last outcome (always 1)
pred_1 <- append(pred, list(rep(1, n)))
# prepend zero vector to predictions for later differencing
pred_0 <- append(list(rep(0, n)), pred) # append a first 0 elemnt for the list
# --------------------------------------------------------------------------------------- #
# total predictions (make sure it returns a list)
pred_total <- as.list(mapply(function(x,y) x-y, pred_1, pred_0, SIMPLIFY = F))
# avoid negative predictions
pred_total <- lapply(pred_total, function(x) ifelse((x < 0), 0, x))
# coerce to final matrix
pred_total <- sapply(pred_total, function(x) as.matrix(x))
# normalize predictions
pred_final <- matrix(apply(pred_total, 1, function(x) (x)/(sum(x))), ncol = ncat, byrow = T)
# add names
colnames(pred_final) <- sapply(categories, function(x) paste("Category", x, sep = " "))
# compute OOB MSE based on whole sample
honest_mse <- mse(pred_final, Y)
# compute OOB RPS based on whole sample
honest_rps <- rps(pred_final, Y)
## convert probabilities into class predictions ("classification")
pred_class <- as.matrix(apply(pred_final, 1, which.max))
colnames(pred_class) <- "Category"
# --------------------------------------------------------------------------------------- #
## now compute marginal effects at mean (with
View(orf_margins)
data <- data_ind_honest
# get number of observations
n_data <- nrow(data[[1]])
# get X as matrix
X <- as.matrix(data[[1]][, -(1)])
# get categories
categories <- seq(1:(length(data)+1))
# evaluate at mean always here in the main orf function
eval <- "mean"
## values for evaluation of the marginal effect - based on honest sample
# share of SD to be used
h_std <- 0.1
# check if X is continuous or dummy or categorical (now X_honest)
X_type <- apply(X, 2, function(x) length(unique(x)))
X_type
# now determine the type of X
X_continuous <- which(X_type > 10) # define IDs of continuous Xs
X_continuous
X_dummy <- which(X_type == 2) # define IDs of dummies
X_dummy
X_categorical <- which(X_type > 2 & X_type <= 10)
X_categorical
# additional check for constant variables which are nonsensical
if (any(X_type == 1) | any(X_type == 0)) {
stop("Some of the covariates are constant. This is non-sensical for evaluation of marginal effects. Programme terminated.")
}
# decide if the marginal effects should be computed at mean or at median
if (eval=="mean") {
# variable of interest: X_1 to X_last, ME at mean
X_mean <- lapply(1:ncol(X), function(x) colMeans(X)) # set all Xs to their mean values (so many times as we have Xs)
} else if (eval=="median") {
# variable of interest: X_1 to X_last, ME at median
X_mean <- lapply(1:ncol(X), function(x) apply(X, 2, median)) # set all Xs to their median values (so many times as we have Xs)
} else {
stop("Incorrect evaluation point. Programme terminated.")
}
# get SD of Xs
X_sd <- apply(X, 2, sd)
# create X_up (X_mean + 0.1 * X_sd)
X_up <- X_mean[[1]] + h_std*X_sd
# create X_down (X_mean - 0.1 * X_sd)
X_down <- X_mean[[1]] - h_std*X_sd
## now check for the support of X
# check X_max
X_max <- apply(X, 2, max)
# check X_min
X_min <- apply(X, 2, min)
# check if X_up is within the range X_min and X_max
X_up <- (X_up < X_max) * X_up + (X_up >= X_max) * X_max
X_up <- (X_up > X_min) * X_up + (X_up <= X_min) * (X_min + h_std * X_sd)
# check if X_down is within the range X_min and X_max
X_down <- (X_down > X_min) * X_down + (X_down <= X_min) * X_min
X_down <- (X_down < X_max) * X_down + (X_down >= X_max) * (X_max - h_std * X_sd)
## now we need 2 datasets: one with X_up and second with X_down
# X_mean_up
X_mean_up <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_up[i]) )
# X_mean_down
X_mean_down <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_down[i]) )
X_mean
## now we need 2 datasets: one with X_up and second with X_down
# X_mean_up
X_mean_up <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_up[i]) )
# X_mean_down
X_mean_down <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_down[i]) )
# adjust for categorical X (works also for zero categorical)
for (i in X_categorical) {
X_mean_up[[i]][[i]] <- ceiling(mean(X[,i]))
X_mean_down[[i]][[i]] <- floor(mean(X[,i]))
}
# adjust for dummies (works also for zero dummies)
for (i in X_dummy) {
X_mean_up[[i]][[i]] <- max(X[,i])
X_mean_down[[i]][[i]] <- min(X[,i])
}
# forest prediction for X_mean_up (use new faster function particularly for ME)
forest_pred_up <- predict_forest_preds_for_ME(forest, data, X_mean_up)
View(predict_forest_preds_for_ME)
pred_data <- X_mean_up
# ------------------------------------------------------------------------ #
# REPLACE FOREACH WITH SIMPLE FOR LOOP !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
# ------------------------------------------------------------------------ #
# get number of observations
n_col <- ncol(data[[1]])-1 # number of X variables
n_row <- nrow(pred_data[[1]]) # number of evaluation points rows
## values for evaluation of the marginal effect - based on honest sample
# share of SD to be used
h_std <- 0.1
# check if X is continuous or dummy or categorical (now X_honest)
X_type <- apply(X, 2, function(x) length(unique(x)))
# now determine the type of X
X_continuous <- which(X_type > 10) # define IDs of continuous Xs
X_dummy <- which(X_type == 2) # define IDs of dummies
X_categorical <- which(X_type > 2 & X_type <= 10)
# additional check for constant variables which are nonsensical
if (any(X_type == 1) | any(X_type == 0)) {
stop("Some of the covariates are constant. This is non-sensical for evaluation of marginal effects. Programme terminated.")
}
# decide if the marginal effects should be computed at mean or at median
if (eval=="mean") {
# variable of interest: X_1 to X_last, ME at mean
X_mean <- lapply(1:ncol(X), function(x) colMeans(X)) # set all Xs to their mean values (so many times as we have Xs)
} else if (eval=="median") {
# variable of interest: X_1 to X_last, ME at median
X_mean <- lapply(1:ncol(X), function(x) apply(X, 2, median)) # set all Xs to their median values (so many times as we have Xs)
} else {
stop("Incorrect evaluation point. Programme terminated.")
}
# decide if the marginal effects should be computed at mean or at median
if (eval=="mean") {
# variable of interest: X_1 to X_last, ME at mean
X_mean <- lapply(1:ncol(X), function(x) t(as.matrix(colMeans(X)))) # set all Xs to their mean values (so many times as we have Xs)
} else if (eval=="median") {
# variable of interest: X_1 to X_last, ME at median
X_mean <- lapply(1:ncol(X), function(x) apply(X, 2, median)) # set all Xs to their median values (so many times as we have Xs)
} else {
stop("Incorrect evaluation point. Programme terminated.")
}
# get SD of Xs
X_sd <- apply(X, 2, sd)
# create X_up (X_mean + 0.1 * X_sd)
X_up <- X_mean[[1]] + h_std*X_sd
# create X_down (X_mean - 0.1 * X_sd)
X_down <- X_mean[[1]] - h_std*X_sd
## now check for the support of X
# check X_max
X_max <- apply(X, 2, max)
# check X_min
X_min <- apply(X, 2, min)
# check if X_up is within the range X_min and X_max
X_up <- (X_up < X_max) * X_up + (X_up >= X_max) * X_max
X_up <- (X_up > X_min) * X_up + (X_up <= X_min) * (X_min + h_std * X_sd)
# check if X_down is within the range X_min and X_max
X_down <- (X_down > X_min) * X_down + (X_down <= X_min) * X_min
X_down <- (X_down < X_max) * X_down + (X_down >= X_max) * (X_max - h_std * X_sd)
X_up
X_down
## now we need 2 datasets: one with X_up and second with X_down
# X_mean_up
X_mean_up <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_up[i]) )
# X_mean_down
X_mean_down <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_down[i]) )
X_mean_up
# X_mean_down
X_mean_down <- lapply(seq_along(X_mean), function(i) replace(X_mean[[i]], i, X_down[i]) )
# adjust for categorical X (works also for zero categorical)
for (i in X_categorical) {
X_mean_up[[i]][[i]] <- ceiling(mean(X[,i]))
X_mean_down[[i]][[i]] <- floor(mean(X[,i]))
}
# adjust for dummies (works also for zero dummies)
for (i in X_dummy) {
X_mean_up[[i]][[i]] <- max(X[,i])
X_mean_down[[i]][[i]] <- min(X[,i])
}
X_mean_up
X_mean_down
X_categorical
X_mean_up[[i]][[i]]
X_mean_up[[1]][[1]]
# adjust for categorical X (works also for zero categorical)
for (i in X_categorical) {
X_mean_up[[i]][[i]] <- ceiling(mean(X[,i]))
X_mean_down[[i]][[i]] <- floor(mean(X[,i]))
}
# adjust for dummies (works also for zero dummies)
for (i in X_dummy) {
X_mean_up[[i]][[i]] <- max(X[,i])
X_mean_down[[i]][[i]] <- min(X[,i])
}
X_mean_up
X_mean_down
# forest prediction for X_mean_up (use new faster function particularly for ME)
forest_pred_up <- predict_forest_preds_for_ME(forest, data, X_mean_up)
# forest prediction for X_mean_down
forest_pred_down <- predict_forest_preds_for_ME(forest, data, X_mean_down)
# now subtract the predictions according to the ME formula
forest_pred_diff_up_down <- mapply(function(x,y) mapply(function(x,y) x-y, x, y,  SIMPLIFY = F), forest_pred_up, forest_pred_down, SIMPLIFY = F)
# subtract predictions according to formula to isolate categories
forest_cond_means_0_last <- append(forest_pred_diff_up_down, list(rep(list(0), ncol(X)))) # append zero elemnt list
forest_cond_means_0_first <- append(list(rep(list(0), ncol(X))), forest_pred_diff_up_down) # prepend zero element list
# compute the scaling factor: X_up-X_down=2*X_sd
scaling_factor <- as.list(X_up - X_down)
# set scaling factor to zero for categorical and dummy variables
for (i in X_categorical & X_dummy) {
scaling_factor[[i]] <- 0
}
X_categorical
X_dummy
scaling_factor
i in X_categorical & X_dummy
for (i in X_categorical & X_dummy) {
print i
}
for (i in X_categorical & X_dummy) {
print(i)
}
for (i in (X_categorical & X_dummy) {
print(i)
}
for (i in (X_categorical & X_dummy)) {
print(i)
}
for (i in (union(X_categorical, X_dummy))) {
print(i)
}
# compute the scaling factor: X_up-X_down=2*X_sd
scaling_factor <- as.list(X_up - X_down)
# set scaling factor to zero for categorical and dummy variables
for (i in (union(X_categorical, X_dummy))) {
scaling_factor[[i]] <- 0
}
scaling_factor
