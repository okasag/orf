(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 3)
round(orf_me$MarginalEffects, 3)
ologit_me$ME.all
# compute the real probabilities and real marginal effects for the example data
# libraries
library(orf)
library(psych)
library(MASS)
library(erer)
# set seed for replicability
set.seed(1)
# number of observations
n  <- 500
# various covariates
X1 <- rnorm(n, 1, 1) # continuous
X2 <- rbinom(n, 5, 0.5)
#X2 <- rpois(n, 1) # categorical
X3 <- rbinom(n, 1, 0.5) # dummy
X4 <- rnorm(n, 0, 1) # noise
# bind into matrix
X <- as.matrix(cbind(X1, X2, X3, X4))
# generate some data
# coefficients
betas <- c(1, 1, 1, 0)
# deterministic component
deterministic <- 1*(X1)^2 + 1*(X2) + 1*(X3)
# generate outcome with logistic error
Y  <- deterministic + rlogis(n, 0, 1)
# thresholds for continuous outcome
cuts <- quantile(Y, c(0, 1/3, 2/3, 1))
# discretize outcome into ordered classes 1, 2, 3
Y  <- as.numeric(cut(Y, breaks = cuts, include.lowest = TRUE))
# compute the true probabilities
real_prob                       <- cbind(logistic(cuts[2] - deterministic) - 0,
logistic(cuts[3] - deterministic) - logistic(cuts[2]-deterministic),
1 - logistic(cuts[3]-deterministic))
# column names
colnames(real_prob) <- c("Class 1", "Class 2", "Class 3")
# 1. estimate ordered forest
orf_fit <- orf(X,Y)
# predict ordered probabilities
orf_pred <- predict(orf_fit)$forestPredictions
# compute MSE (in-sample)
orf_mse <- mean((rowSums((real_prob - orf_pred)^2)/3))
# 2. estimate ordered logit
ologit_fit <- polr(as.factor(Y) ~ .,  data = as.data.frame(cbind(Y,X)))
# predict ordered probabilities
ologit_pred <- predict(ologit_fit, type = "probs")
# compute MSE (in-sample)
ologit_mse <- mean((rowSums((real_prob - ologit_pred)^2)/3))
# compute true marginal effects
# X1 continuous (marginal change)
real_me_x1 <- cbind((0                                               - dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas) - dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 3)
round(orf_me$MarginalEffects, 3)
ologit_me$ME.all
# ologit with another package
# estimate ologit
# ologit <- ologit.reg(Y ~ . , data = as.data.frame(cbind(Y,X)))
# summary(ologit)
# ologit_betas <- ologit$coefficients[1:4]
# ologit_me <- margins.oglmx(ologit, atmeans = FALSE, AME = TRUE)
# ologit_me
library(devtools)
document()
check()
document()
check()
document()
check()
library(orf)
check()
library(orf)
document()
check()
library(orf)
# load example data
data(odata)
# specify response and covariates
Y <- odata[, 1]
X <- odata[, -1]
# estimate Ordered Forestset.seed(123)
#' orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10,
#'  replace = TRUE, sample.fraction = 1, honesty = FALSE,
#'  honesty.fraction = 0, inference = FALSE, importance = FALSE)
# load example data
data(odata)
# specify response and covariates
Y <- odata[, 1]
X <- odata[, -1]
orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10,
replace = TRUE, sample.fraction = 1, honesty = FALSE,
honesty.fraction = 0, inference = FALSE, importance = FALSE)
document()
check()
library(orf)
data(odata)
Y <- odata[, 1]
X <- odata[, -1]
orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10,
replace = TRUE, sample.fraction = 1, honesty = FALSE,
honesty.fraction = 0, inference = FALSE, importance = FALSE)
orf
summary(orf)
document()
check()
library(orf)
data(odata)
Y <- odata[, 1]
X <- odata[, -1]
set.seed(123)
orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10,
replace = TRUE, sample.fraction = 1, honesty = FALSE,  honesty.fraction = 0, inference = FALSE, importance = FALSE)
summary(orf)
library(orf)
library(devtools)
load_all()
data("odata")
X <- odata[, -1]
Y <- odata[, 1]
orf(X,Y)
orf <- orf(X,Y)
orf$MSE
orf$RPS
rps(orf$forestPredictions, Y)
mse(orf$forestPredictions, Y)
# recode Y
Y <- odata[, 1] + 1
orf <- orf(X,Y)
orf$MSE
orf$RPS
rps(orf$forestPredictions, Y)
rps(orf$forestPredictions, Y)
orf$forestPredictions
Y
predictions <- orf$forestPredictions
observed <- Y
# get parameteres
ncat <- as.numeric(ncol(predictions)) # number of categories
ncat
npred <- as.numeric(nrow(predictions)) # number of observations
npred
# create probability distribution for observed outcomes
observed_dist <- matrix(0, nrow = npred, ncol = ncat)
observed_dist
# populate it
for (i in 1:npred) {
observed_dist[i, observed[i]] <- 1
}
observed_dist
observed[i]
observed
i
observed[i]
observed_dist
observed_dist[i, observed[i]]
orf <- orf(X,Y)
seq(1, nrow(odata), 1)
0.8*nrow(odata)
sample(seq(1, nrow(odata), 1), 0.8*nrow(odata))
sort(sample(seq(1, nrow(odata), 1), 0.8*nrow(odata)))
document()
check()
document()
check()
document()
check()
document()
check()
library(orf)
data(odata)
Y <- odata[, 1]
X <- odata[, -1]
set.seed(123)
orf <- orf(X, Y)
margins(orf)
kktko <- margins(orf)
print(kktko)
print(kktko, latex = T)
print(kktko, latex = F)
kktko <- margins(orf, inference = T)
print(kktko)
print(kktko, latex = T)
print(kktko)
print(kktko, latex = T)
kktko$MarginalEffects
xtable(kktko$MarginalEffects)
library(xtable)
xtable(kktko$MarginalEffects)
# put caption an latex environment
xoutput <- xtable(x$MarginalEffects, digits = 4, caption = "ORF Marginal Effects")
# put caption an latex environment
xoutput <- xtable(kktko$MarginalEffects, digits = 4, caption = "ORF Marginal Effects")
xoutput
# print xtable
print.xtable(xoutput, type = "latex", include.rownames = FALSE, comment = FALSE)
# print xtable
print.xtable(xoutput, type = "latex", include.rownames = TRUE, comment = FALSE)
kktko
print(kktko, latex = T)
document()
check()
library(orf)
orf?
)
?orf
?predict.orf
?margins.orf
library(devtools)
document()
check()
use_testthat()
# load example data
data(odata)
# set X and Y for the estimation
Y <- odata[, 1]
X <- odata[, -1]
# set X and Y for the estimation
Y <- odata[, 1]
X <- odata[, -1]
orf <- orf(X, Y)
# set X and Y for the estimation
Y <- odata[1:100, 1]
X <- odata[1:100, -1]
orf <- orf(X, Y)
orf$forestPredictions
rowSums(orf$forestPredictions)
expect_equal(rowSums(orf$forestPredictions), 1)
# start testing the main orf function
test_that("Probabilities sum up to 1", {
orf <- orf(X, Y)
expect_equal(rowSums(orf$forestPredictions), 1)
})
library(testthat)
expect_equal(rowSums(orf$forestPredictions), 1)
expect_equal(rowSums(orf$forestPredictions), rep(1, 100))
expect_equal(rowSums(orf$forestPredictions), rep(1, 100))
# start testing the main orf function
test_that("Probabilities sum up to 1", {
orf <- orf(X, Y)
expect_equal(rowSums(orf$forestPredictions), rep(1, 100))
})
document()
check()
test_that("fitted values are equal to predicted values in training set", {
orf <- orf(X, Y)
orf_fitted <- orf$forestPredictions
orf_predicted <- predict(orf)
expect_equal(orf_fitted, orf_predicted)
})
orf_fitted <- orf$forestPredictions
orf_predicted <- predict(orf)
orf_predicted
test_that("fitted values are equal to predicted values in training set", {
orf <- orf(X, Y)
orf_fitted <- orf$forestPredictions
orf_predicted <- predict(orf)$forestPredictions
expect_equal(orf_fitted, orf_predicted)
})
orf
expect_gte(orf$forestPredictions, 0)
orf$forestPredictions
as.numeric(orf$forestPredictions)
expect_gte(as.numeric(orf$forestPredictions), 0)
expect_gte(as.numeric(orf$forestPredictions), rep(0,300))
expect_gte(as.numeric(orf$forestPredictions), rep(0,300))
any(as.numeric(orf$forestPredictions))
as.numeric(orf$forestPredictions)
rep(0,300)
expect_gt(as.numeric(orf$forestPredictions), rep(0,300))
compare(as.numeric(orf$forestPredictions), rep(0, 300)
)
compare(as.numeric(orf$forestPredictions), rep(0, 300))
compare(as.numeric(orf$forestPredictions), rep(0, 300))$equal
compare(as.numeric(orf$forestPredictions), rep(0, 300))$greater
compare(as.numeric(orf$forestPredictions), rep(0, 300))$less
compare(as.numeric(orf$forestPredictions), rep(0, 300))$gt
compare(as.numeric(orf$forestPredictions), rep(0, 300))
all(as.numeric(orf$forestPredictions) >= 0))
compare(as.numeric(orf$forestPredictions), rep(0, 300)
)
all(as.numeric(orf$forestPredictions) >= 0))
all(as.numeric(orf$forestPredictions) >= 0))
all(as.numeric(orf$forestPredictions) >= 0)
expect_true(all(as.numeric(orf$forestPredictions) >= 0))
(orf$forestPredictions
)
orf <- orf(X, Y)
unique(Y)
expect_equal(ncol(orf$forestPredictions), length(unique(Y)))
test_that("probabilities reflect all observations", {
orf <- orf(X, Y)
expect_equal(nrow(orf$forestPredictions), nrow(Y))
})
nrow(orf$forestPredictions)
nrow(Y)
Y
test_that("probabilities reflect all observations", {
orf <- orf(X, Y)
expect_equal(nrow(orf$forestPredictions), length(Y))
})
orf_classes <- predict(orf, type = "class")$forestPredictions
# classes
test_that("predicted classes reflect actual classes", {
orf <- orf(X, Y)
orf_classes <- predict(orf, type = "class")$forestPredictions
expect_equal(unique(orf_classes), unique(Y))
})
unique(orf_classes)
unique(Y)
# classes
test_that("predicted classes reflect actual classes", {
orf <- orf(X, Y)
orf_classes <- predict(orf, type = "class")$forestPredictions
expect_equal(unique(as.numeric(orf_classes)), unique(Y))
})
orf_classes
typeof(orf)
type(orf)
expect_type(orf, list))
expect_type(orf, list)
expect_type(orf, orf)
expect_type(orf, "list")
expect_s3_class(orf, "orf")
orf <- orf(X, Y, inference = TRUE)
orf
as.numeric(orf$forestVariances))
as.numeric(orf$forestVariances)
expect_true(all(as.numeric(orf$forestVariances)) > 0)
expect_true(all(as.numeric(orf$forestVariances) > 0))
orf <- orf(X, Y, inference = TRUE)
orf_preds <- predict(orf, inference = TRUE)$forestVariances
orf <- orf(X, Y, inference = TRUE)
orf_vars <- orf$forestVariances
orf_preds <- predict(orf, inference = TRUE)$forestVariances
expect_equal(orf_vars, orf_preds)
orf
orf_vars
orf <- orf(X, Y, honesty = FALSE, replace = TRUE, inference = TRUE)
orf <- orf(X, Y, honesty = FALSE, replace = TRUE, inference = TRUE)
orf <- orf(X, Y)
orf <- orf(X, Y, honesty = FALSE, replace = TRUE, inference = TRUE)
# load example data
data(odata)
# set X and Y for the estimation
Y <- odata[1:100, 1]
X <- odata[1:100, -1]
orf(X, Y)
orf(X, Y, inference = T)
orf(X, Y, inference = T)
orf(X, Y, honesty = FALSE, inference = T)
orf(X, Y, honesty = FALSE, inference = T)
all(sort(unique(train[, 1])) != sort(unique(honest[, 1])))
orf(X, Y, honesty = FALSE, inference = T)
document()
check()
orf(X, Y, honesty = FALSE, inference = T)
orf(X, Y, honesty = FALSE, inference = T)
orf(X, Y, honesty = FALSE, inference = T)
orf(X, Y, honesty = FALSE, replace = TRUE, inference = T)
document()
check()
orf(X, Y, honesty = FALSE, replace = TRUE, inference = T)
expect_message(orf(X, Y, honesty = FALSE, replace = TRUE, inference = TRUE))
expect_message(orf(X, Y, honesty = FALSE, replace = FALSE, inference = TRUE))
expect_message(orf(X, Y, honesty = TRUE, replace = TRUE, inference = TRUE))
orf$trainForests
orf$trainForests
length(orf$trainForests)
orf <- orf(X, Y)
expect_type(length(orf$trainForests), length(unique(Y))-1)
expect_equal(length(orf$trainForests), length(unique(Y))-1)
orf$trainForests
orf$forestInfo
orf <- orf(X, Y)
expect_true(orf$MSE > 0)
expect_true(orf$RPS > 0)
orf$variableImportance
orf <- orf(X, Y, importance = T)
orf$variableImportance
orf <- orf(X, Y)
orf_margins <- margins(orf)
orf_margins
orf <- orf(X, Y)
orf_margins <- margins(orf)
expect_s3_class(orf_margins, "orf.margins")
expect_s3_class(orf_margins, "margins.orf")
typeof(orf_margins)
expect_type(orf_margins, "list")
rowSums(orf_margins$MarginalEffects)
as.numeric(rowSums(orf_margins$MarginalEffects))
ncol(X)
ep(0, ncol(X))
rep(0, ncol(X))
expect_equal(as.numeric(rowSums(orf_margins$MarginalEffects)), rep(0, ncol(X)))
orf_margins <- margins(orf)
expect_equal(as.numeric(rowSums(orf_margins$MarginalEffects)), rep(0, ncol(X)))
orf_margins
orf_margins$Variances
as.numeric(orf_margins$Variances)
orf_margins <- margins(orf, inference = TRUE)
as.numeric(orf_margins$Variances)
expect_true(all(as.numeric(orf_margins$Variances) > 0))
orf_margins$Variances
orf_margins$StandardErrors
expect_true(all(as.numeric(orf_margins$StandardErrors) > 0))
orf_margins$tValues
orf_margins$pValues
expect_true(all(as.numeric(orf_margins$pValues) > 0) & all(as.numeric(orf_margins$pValues) < 1))
expect_true(all(as.numeric(orf_margins$pValues) >= 0) & all(as.numeric(orf_margins$pValues) =< 1))
expect_true(all(as.numeric(orf_margins$pValues) >= 0) & all(as.numeric(orf_margins$pValues) <= 1))
orf_margins$MarginalEffects
orf_margins
expect_warning(margins(orf, eval = "something"))
orf <- orf(X, Y, honesty = FALSE, replace = TRUE)
orf <- orf(X, Y, honesty = FALSE, replace = TRUE)
expect_warning(margins(orf, inference = TRUE))
margins(orf, inference = TRUE)
orf <- orf(X, Y)
expect_warning(margins(orf, window = 2))
expect_error(margins(orf, window = 2))
document()
check()
library(orf)
document()
check()
document()
check()
library(orf)
document()
document()
check()
library(orf)
document()
check()
library(orf)
library(orf)
document()
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
library(orf)
