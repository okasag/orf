theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
#theme(plot.title = element_text(size = 30, hjust = 0.5))
# export the graphics
png(filename = paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/newplots/RPS/", setting, ".png"), width = 4000, height = 2500, res = 100)
print(plotlist[[iteration]])
dev.off()
}
### load DGP results and save plots
plotlist <- rep(list(NA), 4)
names(plotlist) <- c("Simple DGP: Low Dimension", "Complicated DGP: Low Dimension", "Simple DGP: High Dimension", "Complicated DGP: High Dimension")
stackdata <- rep(list(NA), 2)
names(stackdata) <- c("RPS")
iteration <- 0
# start for loops
for (setting in names(plotlist)) {
# define which DGP should be loaded
if (setting == "Simple DGP: Low Dimension") {
DGPvector <- c(1,5,9)
} else if (setting == "Complicated DGP: Low Dimension") {
DGPvector <- c(3,7,11)
} else if (setting == "Simple DGP: High Dimension") {
DGPvector <- c(13,17,21)
} else {
DGPvector <- c(15,19,23)
}
# go through RPS and MSE results
iteration <<- iteration + 1;
# go through RPS and MSE results
for (measure in c("RPS")) {
data <- lapply(DGPvector, function(DGP_id) {
# load the data
load(paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/", measure, "/DGP", DGP_id, ".Rdata"))
if (measure == "RPS") {
results_rps
} else {
results_mse
}
})
# put them together to use them in ggplot
data <- lapply(data, function(x) stack(as.data.frame(x)))
# now add list elements under each other
plotdata <- rbind(data[[1]], data[[2]], data[[3]])
# and create column indicating category
plotdata$class <- c(rep("3 Classes", nrow(data[[1]])), rep("6 Classes", nrow(data[[1]])), rep("9 Classes", nrow(data[[1]])),
rep("3 Classes", nrow(data[[1]])), rep("6 Classes", nrow(data[[1]])), rep("9 Classes", nrow(data[[1]])))
# and create column size indicating sample size
plotdata$size <- c(rep("n = 200", (nrow(plotdata)/2)), rep("n = 800", (nrow(plotdata)/2)))
stackdata[[measure]] <- plotdata
}
# now stack RPS and MSE data together
finaldata <- rbind(stackdata[[1]], stackdata[[2]])
# add new column indicating performance measure
finaldata$perfmeasure <- c(rep("ARPS", (nrow(finaldata)/2)))
# add factors fro ggplot
finaldata$perfmeasure <- factor(finaldata$perfmeasure ,levels=c("ARPS"))
# try ggplot with and without ologit
if (setting == "Simple DGP: Low Dimension" | setting == "Complicated DGP: Low Dimension") {
colorfill <- rep(c("grey50", "indianred1", "indianred3", "steelblue", "forestgreen", "darkgreen", "darkorchid1", "darkorchid3"), 1)
} else {
colorfill <- rep(c("indianred1", "indianred3", "steelblue", "forestgreen", "darkgreen", "darkorchid1", "darkorchid3"), 1)
}
# generate plots
plotlist[[iteration]] <- ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
#theme(plot.title = element_text(size = 30, hjust = 0.5))
# export the graphics
png(filename = paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/newplots/RPS/", setting, ".png"), width = 4000, height = 2500, res = 100)
print(plotlist[[iteration]])
dev.off()
}
### load DGP results and save plots
plotlist <- rep(list(NA), 4)
names(plotlist) <- c("Simple DGP: Low Dimension", "Complicated DGP: Low Dimension", "Simple DGP: High Dimension", "Complicated DGP: High Dimension")
stackdata <- rep(list(NA), 2)
names(stackdata) <- c("RPS")
iteration <- 0
# start for loops
for (setting in names(plotlist)) {
# define which DGP should be loaded
if (setting == "Simple DGP: Low Dimension") {
DGPvector <- c(1,5,9)
} else if (setting == "Complicated DGP: Low Dimension") {
DGPvector <- c(3,7,11)
} else if (setting == "Simple DGP: High Dimension") {
DGPvector <- c(13,17,21)
} else {
DGPvector <- c(15,19,23)
}
# go through RPS and MSE results
iteration <<- iteration + 1;
# go through RPS and MSE results
for (measure in c("RPS")) {
data <- lapply(DGPvector, function(DGP_id) {
# load the data
load(paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/", measure, "/DGP", DGP_id, ".Rdata"))
if (measure == "RPS") {
results_rps
} else {
results_mse
}
})
# put them together to use them in ggplot
data <- lapply(data, function(x) stack(as.data.frame(x)))
# now add list elements under each other
plotdata <- rbind(data[[1]], data[[2]], data[[3]])
# and create column indicating category
plotdata$class <- c(rep("3 Classes", nrow(data[[1]])), rep("6 Classes", nrow(data[[1]])), rep("9 Classes", nrow(data[[1]])),
rep("3 Classes", nrow(data[[1]])), rep("6 Classes", nrow(data[[1]])), rep("9 Classes", nrow(data[[1]])))
# and create column size indicating sample size
plotdata$size <- c(rep("n = 200", (nrow(plotdata))), rep("n = 800", (nrow(plotdata))))
stackdata[[measure]] <- plotdata
}
# now stack RPS and MSE data together
finaldata <- rbind(stackdata[[1]], stackdata[[2]])
# add new column indicating performance measure
finaldata$perfmeasure <- c(rep("ARPS", (nrow(finaldata)/2)))
# add factors fro ggplot
finaldata$perfmeasure <- factor(finaldata$perfmeasure ,levels=c("ARPS"))
# try ggplot with and without ologit
if (setting == "Simple DGP: Low Dimension" | setting == "Complicated DGP: Low Dimension") {
colorfill <- rep(c("grey50", "indianred1", "indianred3", "steelblue", "forestgreen", "darkgreen", "darkorchid1", "darkorchid3"), 1)
} else {
colorfill <- rep(c("indianred1", "indianred3", "steelblue", "forestgreen", "darkgreen", "darkorchid1", "darkorchid3"), 1)
}
# generate plots
plotlist[[iteration]] <- ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
#theme(plot.title = element_text(size = 30, hjust = 0.5))
# export the graphics
png(filename = paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/newplots/RPS/", setting, ".png"), width = 4000, height = 2500, res = 100)
print(plotlist[[iteration]])
dev.off()
}
### load DGP results and save plots
plotlist <- rep(list(NA), 4)
names(plotlist) <- c("Simple DGP: Low Dimension", "Complicated DGP: Low Dimension", "Simple DGP: High Dimension", "Complicated DGP: High Dimension")
stackdata <- rep(list(NA), 2)
names(stackdata) <- c("RPS")
iteration <- 0
measure
### load DGP results and save plots
plotlist <- rep(list(NA), 4)
names(plotlist) <- c("Simple DGP: Low Dimension", "Complicated DGP: Low Dimension", "Simple DGP: High Dimension", "Complicated DGP: High Dimension")
stackdata <- rep(list(NA), 2)
names(stackdata) <- c("RPS")
iteration <- 0
setting <- "Complicated DGP: Low Dimension"
# define which DGP should be loaded
if (setting == "Simple DGP: Low Dimension") {
DGPvector <- c(1,5,9)
} else if (setting == "Complicated DGP: Low Dimension") {
DGPvector <- c(3,7,11)
} else if (setting == "Simple DGP: High Dimension") {
DGPvector <- c(13,17,21)
} else {
DGPvector <- c(15,19,23)
}
# go through RPS and MSE results
iteration <<- iteration + 1;
data <- lapply(DGPvector, function(DGP_id) {
# load the data
load(paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/", measure, "/DGP", DGP_id, ".Rdata"))
if (measure == "RPS") {
results_rps
} else {
results_mse
}
})
results_rps
data <- lapply(DGPvector, function(DGP_id) {
# load the data
load(paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/", measure, "/DGP", DGP_id, ".Rdata"))
if (measure == "RPS") {
results_rps
} else {
results_mse
}
})
# put them together to use them in ggplot
data <- lapply(data, function(x) stack(as.data.frame(x)))
data
# now add list elements under each other
plotdata <- rbind(data[[1]], data[[2]], data[[3]])
plotdata
nrow(data[[1]]))
nrow(data[[1]])
# and create column indicating category
plotdata$class <- c(rep("3 Classes", nrow(data[[1]])), rep("6 Classes", nrow(data[[1]])), rep("9 Classes", nrow(data[[1]])))
plotdata
nrow(plotdata)
# and create column size indicating sample size
plotdata$size <- c(rep("n = 200", (nrow(plotdata)/2)), rep("n = 800", (nrow(plotdata)/2)))
stackdata
stackdata[[measure]] <- plotdata
stackdata
# now stack RPS and MSE data together
finaldata <- rbind(stackdata[[1]])
finaldata
nrow(finaldata)
# add new column indicating performance measure
finaldata$perfmeasure <- c(rep("ARPS", (nrow(finaldata))))
finaldata
factor(finaldata$perfmeasure, levels=c("ARPS"))
# add factors fro ggplot
finaldata$perfmeasure <- factor(finaldata$perfmeasure, levels=c("ARPS"))
# try ggplot with and without ologit
if (setting == "Simple DGP: Low Dimension" | setting == "Complicated DGP: Low Dimension") {
colorfill <- rep(c("grey50", "indianred1", "indianred3", "steelblue", "forestgreen", "darkgreen", "darkorchid1", "darkorchid3"), 1)
} else {
colorfill <- rep(c("indianred1", "indianred3", "steelblue", "forestgreen", "darkgreen", "darkorchid1", "darkorchid3"), 1)
}
# generate plots
plotlist[[iteration]] <- ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
# export the graphics
png(filename = paste0("/home/okasag/Documents/HSG/ORF/main_simulation/results/newplots/RPS/", setting, ".png"), width = 4000, height = 2500, res = 100)
print(plotlist[[iteration]])
dev.off()
plotlist
setting
colorfill
finaldata[which(finaldata$size=="n = 200"), ]
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))
+
# generate plots
plotlist[[iteration]] <- ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3)
finaldata
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9)
+
theme(axis.text.x = element_text(angle = 60, vjust = 0.5))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y")
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class)
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
#facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
#facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
#facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw()
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_grid(cols = class, scales = "free_y")
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_grid(cols = vars(class), scales = "free_y")
finaldata
View(finaldata)
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_grid(vars(class), scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw() +
theme(strip.text.x = element_text(size = 50)) +
theme(legend.text = element_text(size = 50)) +
theme(legend.title = element_text(size = 50)) +
theme(axis.text.x = element_text(size = 50, angle = 60, vjust = 0.5)) +
theme(axis.text.y = element_text(size = 50)) +
theme(legend.position = "top", legend.box = "vertical") +
guides(fill=FALSE)
finaldata$size=="n = 200")
finaldata[which(finaldata$size=="n = 200"), ]
finaldata[which(finaldata$size=="n = 800"), ]
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y")
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9)
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1))
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))
class
ggplot(data = finaldata[which(finaldata$size=="n = 200"), ], aes(x = ind, y = values, fill = ind, color = size))+
geom_boxplot(alpha = 0.3) +
geom_boxplot(data = finaldata[which(finaldata$size=="n = 800"), ], aes(y = values), alpha =0.9) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_fill_manual(name = "Method: ", values = colorfill, guide = guide_legend(nrow = 1)) +
#scale_alpha_manual(values = c(0.3, 0.9)) +
#guides(alpha = F) +
scale_color_manual(name = "Sample Size: ", values = c("grey", "black"), guide = guide_legend(nrow = 1))+
facet_wrap(perfmeasure ~ class, scales = "free_y") +
xlab(NULL) +
ylab(NULL) +
#ggtitle(setting) +
theme_bw()
