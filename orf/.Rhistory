seq_along(dataset)
# prepare data as same class but integer instead of character
apply(dataset, 1, unclass)
# prepare data as same class but integer instead of character
apply(dataset, 2, unclass)
dataset
# prepare data as same class but integer instead of character
newdata <- apply(dataset, 2, unclass)
# prepare data as same class but integer instead of character
newdata <- as.data.frame(apply(dataset, 2, unclass))
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
View(X)
X
X[, 1] <- as.ordered(X[, 1])
View(X)
class(X)
class(X[,1])
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
X
Y
dataset$y <- as.numeric(dataset$y)
Y <- as.matrix(dataset[, ncol(dataset)])
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
data <- as.data.frame(cbind(Y,X))
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# estimate ranger
forest <- ranger(dependent.variable.name = "V1", data = data,
num.trees = ntree, mtry = mtry, replace = TRUE,
min.node.size = nmin, importance = "none"))
# estimate ranger
forest <- ranger(dependent.variable.name = "V1", data = data,
num.trees = ntree, mtry = mtry, replace = TRUE,
min.node.size = nmin, importance = "none")
forest
as.numeric(X[1:10, ])
as.numeric(unclass(X[1:10, ]))
dataset$SYMPT <- as.numeric(dataset$SYMPT)
dataset$PB <- as.numeric(dataset$PB)
dataset$HIST <- as.numeric(dataset$HIST)
dataset$BSE <- as.numeric(dataset$BSE)
dataset$DECT <- as.numeric(dataset$DECT)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
X
# now make new numeric
Xnew <- X[1:10, ]
View(Xnew)
# now predict
forest_pred <- predict(forest, data = Xnew)
forest_pred
# now predict
forest_pred <- predict(forest, data = Xnew)$predictions
forest_pred
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# prepare data as same class but integer instead of character
newdata <- as.data.frame(apply(dataset, 2, unclass))
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
data <- as.data.frame(cbind(Y,X))
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# now make new numeric
dataset$SYMPT <- as.numeric(dataset$SYMPT)
dataset$PB <- as.numeric(dataset$PB)
dataset$HIST <- as.numeric(dataset$HIST)
dataset$BSE <- as.numeric(dataset$BSE)
dataset$DECT <- as.numeric(dataset$DECT)
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
orf_model <- orf(X,Y,ntree,mtry,nmin,honesty,inference,margins)
orf_model
orf_model$trainForests
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/okasag/Documents/HSG/ORF/real_data_app")
# load functions
source("ORF_functions.R")
source("ORF_lechner_function_formula.R")
source("cross_validation_function.R")
# 1. dataset: mammography (3 classes, n=412, p=5)
load("mammography_dataset.Rda")
# edit data
dataset$y                           <- as.ordered(dataset$y)
# settings for the forests
n_tree                              <- 1000
m_try                               <- round(sqrt(length(dataset)-1))
repeats                             <- 3
# store results
results_rps                         <- matrix(NA, nrow = repeats, ncol = 6) # create a list of DGP matrices based on number of reps
colnames(results_rps)               <- c("Ologit", "Naive", "Hornung", "Hornik", "Lechner", "Honest")
results_mse                         <- results_rps # create a list of DGP matrices based on number of reps
# ordered logit
set.seed(3192)
data <- dataset
method <- "lechner"
repeats <- 2
folds <- 10
trees <- 1000
dataset <- data
dataset
m_try <- round(sqrt(length(dataset)-1))
n_tree <- trees
m_try
n_tree
# repeated cross-validation
cv <- matrix(NA, nrow = repeats, ncol = 2)
r <- 1
n_folds <- folds
folds_i <- sample(rep(1:n_folds, length.out = nrow(dataset)))
cv_tmp <- matrix(NA, nrow = n_folds, ncol = 2)
k<-1
test_i <- which(folds_i == k)
train <- dataset[-test_i, ]
test <- dataset[test_i, ]
model_prob                        <- ORF_Lechner_predict("y", "y", traindata = train, testdata = test, ntree = n_tree, mtry = m_try)
model_prob
depvar <- "y"
testdepvar <- "y"
traindata <- train
testdata <- test
ntree <- n_tree
mtry <- m_try
# load needed libraries
library(ranger)
# set needed local variables
outcome <- as.data.frame(traindata[,depvar])
outcome
colnames(outcome) <- depvar
outcome[,1] <- as.numeric(outcome[,1])
outcome
covariates <- traindata[,which(colnames(traindata)!=depvar)]
# set needed local variables
outcome_test <- as.data.frame(testdata[,testdepvar])
colnames(outcome_test) <- depvar
outcome_test[,1] <- as.numeric(outcome_test[,1])
covariates_test <- testdata[,which(colnames(testdata)!=testdepvar)]
# parameters
n <- as.numeric(nrow(outcome)) # number of observations
cat <- as.numeric(sort(unique(outcome[,1]))) # sequence of categories
ncat <- as.numeric(length(cat)) # number of categories
cat <- cat[1:(ncat-1)] # cat to esitmate / without the last category (not needed cuz P(Y_ind<=last_cat)=1)
# parameters
n_test <- as.numeric(nrow(outcome_test)) # number of observations
cat_test <- as.numeric(sort(unique(outcome_test[,1]))) # sequence of categories
cat_test <- union(cat, cat_test) # ensure that a category is not missing if it is not represented in a small testing sample
ncat_test <- as.numeric(length(cat_test)) # number of categories
cat_test <- cat_test[1:(ncat_test-1)] # cat to esitmate / without the last category (not needed cuz P(Y_ind<=last_cat)=1)
# create indicator variables (outcomes)
Y <- lapply(cat, function(x) ifelse((outcome <= x), 1, 0))
Y
# create dataset
data <- lapply(Y, function(x) as.data.frame(cbind(as.matrix(unlist(x)),covariates)))
# estimate ncat-1 forests
forest <- lapply(data, function(x) ranger(dependent.variable.name = paste(depvar), data = x,
num.trees = ntree, mtry = mtry,
importance = "none")
)
forest
# estimate ncat-1 forests
#forest_test <- mapply(function(x,y) predict(x, data = y), forest, data_test, SIMPLIFY = F)
forest_test <- lapply(forest, function(x) predict(x, covariates_test))
forest_test
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
data <- as.data.frame(cbind(Y,X))
data <- as.data.frame(cbind(as.matrix(Y), X))
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
cbind(Y,X)
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
X <- as.data.frame(X)
Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
X <- as.data.frame(X)
Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.data.frame(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# estimate ranger
forest <- ranger(dependent.variable.name = "outcome", data = data,
num.trees = ntree, mtry = mtry, replace = TRUE,
min.node.size = nmin, importance = "none")
forest
# now make new numeric
dataset$SYMPT <- as.numeric(dataset$SYMPT)
dataset$PB <- as.numeric(dataset$PB)
dataset$HIST <- as.numeric(dataset$HIST)
dataset$BSE <- as.numeric(dataset$BSE)
dataset$DECT <- as.numeric(dataset$DECT)
dataset$y <- as.numeric(dataset$y)
Xnew <- X[1:10, ]
Xnew <- dataset[1:10, -6]
Xnew <- as.matrix(dataset[1:10, -6])
# now predict with
forest_pred_numeric <- predict(forest, data = Xnew)$predictions
forest_pred_numeric
# now predict with original data factor
Xold <- data[1:10, -6]
# now predict with original data factor
Xold <- data[1:10, -6]
forest_pred_factor <- predict(forest, data = Xold)$predictions
# now predict with original data factor
Xold <- data[1:10, ]
# now predict with original data factor
Xold <- data[1:10, -1]
forest_pred_factor <- predict(forest, data = Xold)$predictions
forest_pred_numeric
forest_pred_factor
Xold
Xnew
library(grf)
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
View(X)
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.data.frame(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# estimate ranger
forest <- ranger(dependent.variable.name = "outcome", data = data,
num.trees = ntree, mtry = mtry, replace = TRUE,
min.node.size = nmin, importance = "none")
# now make new numeric
dataset$SYMPT <- as.numeric(dataset$SYMPT)
dataset$PB <- as.numeric(dataset$PB)
dataset$HIST <- as.numeric(dataset$HIST)
dataset$BSE <- as.numeric(dataset$BSE)
dataset$DECT <- as.numeric(dataset$DECT)
dataset$y <- as.numeric(dataset$y)
Xnew <- as.matrix(dataset[1:10, -6])
data
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
#X <- as.data.frame(dataset[, 1:ncol(dataset)-1])
#Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
dataset$y <- as.numeric(dataset$y)
Y <- as.matrix(dataset[, ncol(dataset)])
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# estimate orf in first place
set.seed(311992) # put your birthday here
orf_model <- orf(X,Y,ntree,mtry,nmin,honesty,inference,margins)
orf_model
orf_model$trainForests
View(X)
class(X)
class(X[,1])
class(X[,2])
class(X[,3])
class(X[,4])
class(X[,5])
orf_model$forestInfo$trainData
class(orf_model$forestInfo$trainData)
maindata <- (orf_model$forestInfo$trainData)
forest <- orf_model
eval <- "mean"
newdata <- NULL
### decide if prediction or in sample marginal effects should be evaluated
if (is.null(newdata)) {
# if no newdata supplied, estimate in sample marginal effects
if (forest$forestInfo$inputs$honesty == FALSE) {
data <- forest$forestInfo$trainData # take in-sample data
} else if (forest$forestInfo$inputs$honesty == TRUE) {
data <- forest$forestInfo$honestData
}
} else {
# check if newdata is compatible with train data
if (ncol(newdata) != ncol(forest$forestInfo$trainData)) {
stop("newdata is not compatible with training data. Programme terminated.")
} else {
data = newdata
}
}
### data preparation and checks
# get number of observations
n_data <- as.numeric(nrow(data))
data
class(data)
# get categories
categories <- forest$forestInfo$categories
# get X as matrix
X <- as.matrix(data[, -1])
# get Y as matrix
Y <- as.matrix(data[, 1])
# create indicator variables (outcomes)
Y_ind <- lapply(categories[1:length(categories)-1], function(x) ifelse((Y <= x), 1, 0))
# create datasets with indicator outcomes
data_ind <- lapply(Y_ind, function(x) as.data.frame(cbind(as.matrix(unlist(x)), X)))
data_ind
data_ind[[1]]
data_ind[[1]][[1]]
### marginal effects preparation
# share of SD to be used
h_std <- 0.1
# check if X is continuous or dummy or categorical
X_type <- apply(X, 2, function(x) length(unique(x)))
# now determine the type of X
X_continuous <- which(X_type > 10) # define IDs of continuous Xs
X_dummy <- which(X_type == 2) # define IDs of dummies
X_categorical <- which(X_type > 2 & X_type <= 10)
# additional check for constant variables which are nonsensical
if (any(X_type == 1) | any(X_type == 0)) {
stop("Some of the covariates are constant. This makes no sense for evaluation of marginal effects. Programme terminated.")
}
### check the evaluation point
if (eval == "atmean") {
# variable of interest: X_1 to X_last, ME at mean
X_mean <- lapply(1:ncol(X), function(x) t(as.matrix(colMeans(X)))) # set all Xs to their mean values (so many times as we have Xs)
} else if (eval == "atmedian") {
# variable of interest: X_1 to X_last, ME at median
X_mean <- lapply(1:ncol(X), function(x) t(as.matrix(apply(X, 2, median)))) # set all Xs to their median values (so many times as we have Xs)
} else if (eval == "mean") {
# # variable of interest: X_1 to X_last, mean ME
X_mean <- lapply(1:ncol(X), function(x) X) # set all Xs to their exact values (so many times as we have Xs)
} else {
stop("Incorrect evaluation point. This must be one of be one of mean, atmean, or atmedian. Programme terminated.")
}
### get data needed for evaluation of ME
# get number of evaluation points
X_rows <- nrow(X_mean[[1]])
# get number of Xs
X_cols <- ncol(X_mean[[1]])
# get SD of Xs
X_sd <- rep_row(apply(X, 2, sd), n = X_rows)
# create X_up (X_mean + 0.1 * X_sd)
X_up <- X_mean[[1]] + h_std*X_sd
# # variable of interest: X_1 to X_last, mean ME
X_mean <- lapply(1:ncol(X), function(x) X) # set all Xs to their exact values (so many times as we have Xs)
X_mean
### get data needed for evaluation of ME
# get number of evaluation points
X_rows <- nrow(X_mean[[1]])
# get number of Xs
X_cols <- ncol(X_mean[[1]])
# get SD of Xs
X_sd <- rep_row(apply(X, 2, sd), n = X_rows)
X_sd
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
#X <- as.data.frame(dataset[, 1:ncol(dataset)-1])
#Y <- as.matrix(dataset[, ncol(dataset)])
colnames(Y) <- "outcome"
data <- as.data.frame(cbind(Y,X))
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# estimate grf
# with character matrix
forest_grf <- regression_forest(X,Y, mtry = mtry, honesty = TRUE, num.trees = ntree)
orf?
)
?orf
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# convert outcome
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
# load orf
library(orf)
# estimate with polr
library(MASS)
library(erer)
### 1. WINE DATA
load("~/Documents/HSG/ORF/data/winequality_dataset_rdata.Rdata")
### 2. MAMMOGRAPHY DATA
load("~/Documents/HSG/ORF/data/mammography_dataset_rdata.Rdata")
# prepare data
dataset$SYMPT <- as.numeric(dataset$SYMPT)
dataset$PB <- as.numeric(dataset$PB)
dataset$HIST <- as.numeric(dataset$HIST)
dataset$BSE <- as.numeric(dataset$BSE)
dataset$DECT <- as.numeric(dataset$DECT)
dataset$y <- as.numeric(dataset$y)
# matrices
X <- as.matrix(dataset[, 1:ncol(dataset)-1])
Y <- as.matrix(dataset[, ncol(dataset)])
# prepare parameters
ntree <- 1000
mtry <- ceiling(sqrt(ncol(X)))
nmin <- 5
honesty <- TRUE
inference <- FALSE
margins <- FALSE
# estimate orf in first place
set.seed(311992) # put your birthday here
orf_model <- orf(X,Y,ntree,mtry,nmin,honesty,inference,margins)
orf_model$forestInfo$inputs$inference <- TRUE
orf_mean_me <- margins(orf_model, eval = "mean", NULL)
orf_mean_me
orf_model$forestInfo$inputs$inference <- FALSE
orf_mean_me <- margins(orf_model, eval = "mean", NULL)
orf_mean_me
