logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 4)
round(orf_me$effects, 4)
ologit_me$ME.all
# check mse for marginal effects
orf_me_mse <- mean((rowSums((real_me - orf_me$effects)^2)/3))
ologit_me_mse <- mean((rowSums((real_me - ologit_me$ME.all)^2)/3))
kkt <- margins(orf_fit, inference = T)
summary(kkt)
# set seed for replicability
set.seed(123)
# number of observations
n  <- 1000
# various covariates
X1 <- rnorm(n, 0, 1) # continuous
X2 <- rbinom(n, 10, 0.5)
#X2 <- rpois(n, 1) # categorical
X3 <- rbinom(n, 1, 0.5) # dummy
X4 <- rnorm(n, 0, 10) # noise
# bind into matrix
X <- as.matrix(cbind(X1, X2, X3, X4))
# generate some data
# coefficients
betas <- c(1, 1, 1, 0)
# deterministic component
deterministic <- 1*(X1) + 1*(X2) + 1*(X3)
# generate outcome with logistic error
Y  <- deterministic + rlogis(n, 0, 1)
# thresholds for continuous outcome
cuts <- quantile(Y, c(0, 1/3, 2/3, 1))
# discretize outcome into ordered classes 1, 2, 3
Y  <- as.numeric(cut(Y, breaks = cuts, include.lowest = TRUE))
# compute the true probabilities
real_prob                       <- cbind(logistic(cuts[2] - deterministic) - 0,
logistic(cuts[3] - deterministic) - logistic(cuts[2]-deterministic),
1 - logistic(cuts[3]-deterministic))
# column names
colnames(real_prob) <- c("Class 1", "Class 2", "Class 3")
# 1. estimate ordered forest
set.seed(123)
orf_fit <- orf(X,Y)
# predict ordered probabilities
orf_pred <- predict(orf_fit)$predictions
# compute MSE (in-sample)
orf_mse <- mean((rowSums((real_prob - orf_pred)^2)/3))
# 2. estimate ordered logit
ologit_fit <- polr(as.factor(Y) ~ .,  data = as.data.frame(cbind(Y,X)))
# predict ordered probabilities
ologit_pred <- predict(ologit_fit, type = "probs")
# compute MSE (in-sample)
ologit_mse <- mean((rowSums((real_prob - ologit_pred)^2)/3))
# compute true marginal effects
# X1 continuous (marginal change)
real_me_x1 <- cbind((0                                               - dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas) - dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 4)
round(orf_me$effects, 4)
ologit_me$ME.all
# check mse for marginal effects
orf_me_mse <- mean((rowSums((real_me - orf_me$effects)^2)/3))
ologit_me_mse <- mean((rowSums((real_me - ologit_me$ME.all)^2)/3))
# ologit with another package
# set seed for replicability
set.seed(123)
# number of observations
n  <- 1000
# various covariates
X1 <- rnorm(n, 0, 1) # continuous
X2 <- rbinom(n, 3, 0.5)
#X2 <- rpois(n, 1) # categorical
X3 <- rbinom(n, 1, 0.5) # dummy
X4 <- rnorm(n, 0, 10) # noise
# bind into matrix
X <- as.matrix(cbind(X1, X2, X3, X4))
# generate some data
# coefficients
betas <- c(1, 1, 1, 0)
# deterministic component
deterministic <- 1*(X1) + 1*(X2) + 1*(X3)
# generate outcome with logistic error
Y  <- deterministic + rlogis(n, 0, 1)
# thresholds for continuous outcome
cuts <- quantile(Y, c(0, 1/3, 2/3, 1))
# discretize outcome into ordered classes 1, 2, 3
Y  <- as.numeric(cut(Y, breaks = cuts, include.lowest = TRUE))
# compute the true probabilities
real_prob                       <- cbind(logistic(cuts[2] - deterministic) - 0,
logistic(cuts[3] - deterministic) - logistic(cuts[2]-deterministic),
1 - logistic(cuts[3]-deterministic))
# column names
colnames(real_prob) <- c("Class 1", "Class 2", "Class 3")
# 1. estimate ordered forest
set.seed(123)
orf_fit <- orf(X,Y)
# predict ordered probabilities
orf_pred <- predict(orf_fit)$predictions
# compute MSE (in-sample)
orf_mse <- mean((rowSums((real_prob - orf_pred)^2)/3))
# 2. estimate ordered logit
ologit_fit <- polr(as.factor(Y) ~ .,  data = as.data.frame(cbind(Y,X)))
# predict ordered probabilities
ologit_pred <- predict(ologit_fit, type = "probs")
# compute MSE (in-sample)
ologit_mse <- mean((rowSums((real_prob - ologit_pred)^2)/3))
# compute true marginal effects
# X1 continuous (marginal change)
real_me_x1 <- cbind((0                                               - dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas) - dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 4)
round(orf_me$effects, 4)
ologit_me$ME.all
# check mse for marginal effects
orf_me_mse <- mean((rowSums((real_me - orf_me$effects)^2)/3))
ologit_me_mse <- mean((rowSums((real_me - ologit_me$ME.all)^2)/3))
# ologit with another package
# estimate ologit
# ologit <- ologit.reg(Y ~ . , data = as.data.frame
# set seed for replicability
set.seed(123)
# number of observations
n  <- 1000
# various covariates
X1 <- rnorm(n, 0, 1) # continuous
X2 <- rbinom(n, 10, 0.5)
#X2 <- rpois(n, 1) # categorical
X3 <- rbinom(n, 1, 0.5) # dummy
X4 <- rnorm(n, 0, 1) # noise
# bind into matrix
X <- as.matrix(cbind(X1, X2, X3, X4))
# generate some data
# coefficients
betas <- c(1, 1, 1, 0)
# deterministic component
deterministic <- 1*(X1) + 1*(X2) + 1*(X3)
# generate outcome with logistic error
Y  <- deterministic + rlogis(n, 0, 1)
# thresholds for continuous outcome
cuts <- quantile(Y, c(0, 1/3, 2/3, 1))
# discretize outcome into ordered classes 1, 2, 3
Y  <- as.numeric(cut(Y, breaks = cuts, include.lowest = TRUE))
# compute the true probabilities
real_prob                       <- cbind(logistic(cuts[2] - deterministic) - 0,
logistic(cuts[3] - deterministic) - logistic(cuts[2]-deterministic),
1 - logistic(cuts[3]-deterministic))
# column names
colnames(real_prob) <- c("Class 1", "Class 2", "Class 3")
# 1. estimate ordered forest
set.seed(123)
orf_fit <- orf(X,Y)
# predict ordered probabilities
orf_pred <- predict(orf_fit)$predictions
# compute MSE (in-sample)
orf_mse <- mean((rowSums((real_prob - orf_pred)^2)/3))
# 2. estimate ordered logit
ologit_fit <- polr(as.factor(Y) ~ .,  data = as.data.frame(cbind(Y,X)))
# predict ordered probabilities
ologit_pred <- predict(ologit_fit, type = "probs")
# compute MSE (in-sample)
ologit_mse <- mean((rowSums((real_prob - ologit_pred)^2)/3))
# compute true marginal effects
# X1 continuous (marginal change)
real_me_x1 <- cbind((0                                               - dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas) - dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 4)
round(orf_me$effects, 4)
ologit_me$ME.all
# check mse for marginal effects
orf_me_mse <- mean((rowSums((real_me - orf_me$effects)^2)/3))
ologit_me_mse <- mean((rowSums((real_me - ologit_me$ME.all)^2)/3))
# ologit with another package
# estimate ologit
# ologit <- ologit.reg(Y ~ . , data = as.data.frame(cbind(Y,X)))
# summary(ologit)
summary(kkt)
# set seed for replicability
set.seed(123)
# number of observations
n  <- 1000
# various covariates
X1 <- rnorm(n, 0, 1) # continuous
X2 <- rbinom(n, 5, 0.5)
#X2 <- rpois(n, 1) # categorical
X3 <- rbinom(n, 1, 0.5) # dummy
X4 <- rnorm(n, 0, 5) # noise
# bind into matrix
X <- as.matrix(cbind(X1, X2, X3, X4))
# generate some data
# coefficients
betas <- c(1, 1, 1, 0)
# deterministic component
deterministic <- 1*(X1) + 1*(X2) + 1*(X3)
# generate outcome with logistic error
Y  <- deterministic + rlogis(n, 0, 1)
# thresholds for continuous outcome
cuts <- quantile(Y, c(0, 1/3, 2/3, 1))
# discretize outcome into ordered classes 1, 2, 3
Y  <- as.numeric(cut(Y, breaks = cuts, include.lowest = TRUE))
# compute the true probabilities
real_prob                       <- cbind(logistic(cuts[2] - deterministic) - 0,
logistic(cuts[3] - deterministic) - logistic(cuts[2]-deterministic),
1 - logistic(cuts[3]-deterministic))
# column names
colnames(real_prob) <- c("Class 1", "Class 2", "Class 3")
# 1. estimate ordered forest
set.seed(123)
orf_fit <- orf(X,Y)
# predict ordered probabilities
orf_pred <- predict(orf_fit)$predictions
# compute MSE (in-sample)
orf_mse <- mean((rowSums((real_prob - orf_pred)^2)/3))
# 2. estimate ordered logit
ologit_fit <- polr(as.factor(Y) ~ .,  data = as.data.frame(cbind(Y,X)))
# predict ordered probabilities
ologit_pred <- predict(ologit_fit, type = "probs")
# compute MSE (in-sample)
ologit_mse <- mean((rowSums((real_prob - ologit_pred)^2)/3))
# compute true marginal effects
# X1 continuous (marginal change)
real_me_x1 <- cbind((0                                               - dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas) - dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 4)
round(orf_me$effects, 4)
ologit_me$ME.all
# check mse for marginal effects
orf_me_mse <- mean((rowSums((real_me - orf_me$effects)^2)/3))
ologit_me_mse <- mean((rowSums((real_me - ologit_me$ME.all)^2)/3))
set.seed(123)
# number of observations
n  <- 1000
# various covariates
X1 <- rnorm(n, 1, 1) # continuous
X2 <- rbinom(n, 2, 0.5)
#X2 <- rpois(n, 1) # categorical
X3 <- rbinom(n, 1, 0.5) # dummy
X4 <- rnorm(n, 0, 1) # noise
# bind into matrix
X <- as.matrix(cbind(X1, X2, X3, X4))
# generate some data
# coefficients
betas <- c(1, 1, 1, 0)
# deterministic component
deterministic <- 1*(X1) + 1*(X2) + 1*(X3)
# generate outcome with logistic error
Y  <- deterministic + rlogis(n, 0, 1)
# thresholds for continuous outcome
cuts <- quantile(Y, c(0, 1/3, 2/3, 1))
# discretize outcome into ordered classes 1, 2, 3
Y  <- as.numeric(cut(Y, breaks = cuts, include.lowest = TRUE))
# compute the true probabilities
real_prob                       <- cbind(logistic(cuts[2] - deterministic) - 0,
logistic(cuts[3] - deterministic) - logistic(cuts[2]-deterministic),
1 - logistic(cuts[3]-deterministic))
# column names
colnames(real_prob) <- c("Class 1", "Class 2", "Class 3")
# 1. estimate ordered forest
set.seed(123)
orf_fit <- orf(X,Y)
# predict ordered probabilities
orf_pred <- predict(orf_fit)$predictions
# compute MSE (in-sample)
orf_mse <- mean((rowSums((real_prob - orf_pred)^2)/3))
# 2. estimate ordered logit
ologit_fit <- polr(as.factor(Y) ~ .,  data = as.data.frame(cbind(Y,X)))
# predict ordered probabilities
ologit_pred <- predict(ologit_fit, type = "probs")
# compute MSE (in-sample)
ologit_mse <- mean((rowSums((real_prob - ologit_pred)^2)/3))
# compute true marginal effects
# X1 continuous (marginal change)
real_me_x1 <- cbind((0                                               - dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[2] - cbind(X1, X2, X3, X4)%*%betas) - dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas))*betas[1],
(dlogis(cuts[3] - cbind(X1, X2, X3, X4)%*%betas) -                                               0)*betas[1])
# take the mean
real_me_x1 <- colMeans(real_me_x1)
# X2 categorical (discrete change)
real_me_x2 <- (cbind(logistic(cuts[2] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, ceiling(mean(X2)), X3, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, floor(mean(X2)), X3, X4)%*%betas) - logistic(cuts[2]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, floor(mean(X2)), X3, X4)%*%betas)))
# take the mean
real_me_x2 <- colMeans(real_me_x2)
# X3 binary (discrete change)
real_me_x3 <- (cbind(logistic(cuts[2] - cbind(X1, X2, 1, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 1, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 1, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 1, X4)%*%betas))
-
cbind(logistic(cuts[2] - cbind(X1, X2, 0, X4)%*%betas) - 0,
logistic(cuts[3] - cbind(X1, X2, 0, X4)%*%betas) - logistic(cuts[2]-cbind(X1, X2, 0, X4)%*%betas),
1 - logistic(cuts[3]-cbind(X1, X2, 0, X4)%*%betas)))
# take the mean
real_me_x3 <- colMeans(real_me_x3)
# combine everything together
real_me <- rbind(real_me_x1, real_me_x2, real_me_x3, rep(0,3))
colnames(real_me) <- c("Class 1", "Class 2", "Class 3")
rownames(real_me) <- c("X1", "X2", "X3", "X4")
# 1. estimate orf marginal effects
orf_me <- margins(orf_fit)
# 2. estimate ologit marginal effects
ologit_me <- ocME(ologit_fit)$out
# compare the three
round(real_me, 4)
round(orf_me$effects, 4)
ologit_me$ME.all
# check mse for marginal effects
orf_me_mse <- mean((rowSums((real_me - orf_me$effects)^2)/3))
ologit_me_mse <- mean((rowSums((real_me - ologit_me$ME.all)^2)/3))
X2 <- rbinom(n, 2, 1/3)
X2
hist(X2)
X2 <- rbinom(n, 2, 2/3)
hist(X2)
X2 <- rbinom(n, 2, 1/3)
X2 <- rbinom(n, 2, 1/2)
hist(X2)
X2 <- rbinom(n, 3, 1/3)
hist(X2)
X2 <- rbinom(n, 3, 1/2)
hist(X2)
install.packages("grf")
library(grf)
require(ranger)
ranger(Species ~ ., data = iris)
ranger(Species ~ ., data = iris)
require(orf)
data(odata)
Y <- odata[, 1]
X <- odata[, -1]
class(Y)
class(X)
library(devtools)
document()
check()
library(orf)
document()
check()
document()
check()
library(orf)
margins(p)
p <- 1
margins(p)
margins(orf_fit)
document()
check()
document()
check()
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
library(orf)
document()
document()
check()
library(orf)
document()
check()
licence()
document()
check()
library(orf)
