p_values <- 2*pnorm(-abs(z_scores))
p_values
round(p_values, 5)
forest_cond_means[[1]][[1]]
forest_cond_means_0_last
forest_cond_means_0_first
X_mean_up
X_mean
X_mean_up[[1]][[1]]
X_mean_dwon[[1]][[1]]
X_mean_down[[1]][[1]]
X_mean_down[[1]]
forest_cond_means
forest_cond_means[[1]]
forest_cond_means[[1]][[1]]
Y_ind_honest
Y_ind_honest
Y_ind_honest[[1]]
head(Y_ind_honest[[1]])
forest_weights_diff_up_down[[1]]
forest_weights_diff_up_down[[1]][[1]]
forest_weights_diff_up_down[[1]][[1]][1:10]
round(forest_weights_diff_up_down[[1]][[1]][1:10], 8)
forest_weights_diff_up_down[[1]][[1]][1:10]
sum(forest_weights_diff_up_down[[1]][[1]])
marginal_effects
forest_cond_means
forest_cond_means[[1]][[1]]
forest_weights_diff_up_down
forest_weights_diff_up_down[[1]][[1]]
forest_weights_diff_up_down[[1]][[1]][1:10]
round(forest_weights_diff_up_down[[1]][[1]][1:10],8)
forest_cond_means[[1]][[1]]
forest_cond_means_mean
forest_cond_means_mean[[1]][[1]]
forest_multi[[1]][[1]]
head(forest_multi[[1]][[1]])
head(forest_demeaned[[1]][[1]])
head(forest_multi_demeaned[[1]][[1]])
head(forest_multi[[1]][[1]])
forest_cond_means_mean[[1]][[1]]
head(forest_multi_demeaned[[1]][[1]])
scaling_factor_squared
scaling_factor_squared[[1]]
1/scaling_factor_squared[[1]]
variance[[1]]
variance[[1]][[1]]
head(forest_multi_demeaned[[1]][[1]])
round(head(forest_multi_demeaned[[1]][[1]]),5)
round(head(forest_multi_demeaned_sq[[1]][[1]]),5)
round(head(forest_multi_demeaned_sq[[1]][[1]]),9)
round(head(forest_multi_demeaned_sq[[1]][[1]]),8)
round(head(forest_multi_demeaned_sq[[1]][[1]]),7)
round(head(forest_multi_demeaned_sq[[1]][[1]]),6)
head(forest_multi_demeaned_sq[[1]][[1]])
7.094366e-08
7.094366e-08
7.094366*0.00000001
forest_multi_demeaned_sq_sum
forest_multi_demeaned_sq_sum[[1]]
forest_multi_demeaned_sq_sum[[1]][[1]]
forest_multi_demeaned_sq_sum_scaled[[1]][[1]]
forest_multi_demeaned_sq_sum_scaled_norm[[1]][[1]]
marginal_effects
variance_marginal_effects
round(variance_marginal_effects,6)
z_scores
p_values
round(p_values,8)
View(predict_forest_preds_for_ME)
View(predict_forest_weights)
View(coefstars)
library(orf)
?orf
# load needed libraries for the functions
library(ranger)
#library(foreach)
library(Rcpp)
library(ggplot2)
library(gridExtra)
library(xtable)
# load Rcpp functions first
#sourceCpp("tree_weights_rcp
library(grf)
library(orf)
?orf
library(orf)
?orf
?coefstars
?rps
library(devtools)
devtools::use_rcpp()
usethis::use_rcpp()
devtools::document()
library(orf)
?orf
devtools::use_rcpp()
devtools::document()
getLoadedDLLs()
devtools::document()
load_all()
pkgload::load_all()
roxygen2::roxygenize()
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
library(orf)
devtools::use_rcpp()
devtools::document()
install_version("roxygen2", "6.1.0")
library(devtools)
devtools::use_rcpp()
devtools::document()
install_version("roxygen2", "6.1.1")
`pkgload::load_all()
)
a
a
s`
pkgload::load_all()
library(orf)
devtools::document()
?orf
?grf
library(grf)
?grf
# get some example data and parameters
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("sim_data.RData") # load generated data from ologit
X <- as.matrix(odata[, 2:16])
X_test <- as.matrix(odata_test[, 2:16])
Y <- as.matrix(odata[, 1])
ntree <- 1000
mtry <- 5
honesty <- FALSE
inference <- FALSE
margins <- FALSE
# load needed libraries for the functions
library(ranger)
rangerforest <- ranger(Yo ~. , data = odata)
grfforest <- regression_forest(X,Y)
grfforest <- regression_forest(X,Y)
library(grf)
X
Y
Y <- as.numeric(Y)
grfforest <- regression_forest(X,Y)
predict(rangerforest, type = "terminalNodes")
predict(rangerforest, data = odata,type = "terminalNodes")
predict(grfforest, data = odata,type = "terminalNodes")
predict(grfforest, data = odata)
?predict.regression_forest
get_tree(grfforest,1)
tree1 <- get_tree(grfforest,1)
tree1$num_samples
tree1$drawn_samples
tree1$nodes
sort(tree1$drawn_samples)
tree1$nodes
unlist(tree1$nodes)
unlist(tree1$nodes)
sort(unlist(tree1$nodes))
unique(sort(unlist(tree1$nodes)))
grfforest <- regression_forest(X,Y, honesty = TRUE, honesty.fraction = 0.9)
tree1 <- get_tree(grfforest,1)
tree1$nodes
sort(unlist(tree1$nodes))
unique(sort(unlist(tree1$nodes)))
library(devtools)
devtools::load_all()
devtools::document()
usethis::use_package("ranger")
devtools::document()
devtools::use_rcpp()
devtools::document()
getLoadedDLLs()
pkgbuild::compile_dll()
devtools::document()
devtools::session_info("devtools")
pkgbuild::compile_dll()
pkgbuild::compile_dll()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
install_version("roxygen2", "6.0.1")
library(roxygen2)
library(devtools)
library("roxygen2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
use_rcpp()
devtools::document()
devtools::check()
devtools::check()
install.packages("roxygen2")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
check()
use_rcpp()
devtools::document()
use_rcpp()
check()
vignette("Rcpp-package")
use_rcpp()
devtools::document()
check()
roxygen2::rogyxenise()
roxygen2::rogyxenize()
roxygenise()
usethis::use_rcpp()
devtools::document()
check()
devtools::document()
devtools::document()
devtools::document()
check()
devtools::document()
check()
devtools::document()
devtools::document()
usethis::use_rcpp()
devtools::document()
check
check()
devtools::load_all(".")
devtools::document()
check()
library(orf)
?orf
timesTwo(10)
check()
check()
R CMD config CFLAGS
config CFLAGS
check()
load_all()
document
document()
check()
library(orf)
check()
timesTwo(10)
document()
check()
library(orf)
load_all()
?orf
library("orf", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
document()
document()
document()
document()
load_all()
document()
document()
document()
check()
library(orf)
?timesTwo
library(Rcpp)
load_all()
document()
check()
library(orf)
?orf
timesTwo(2)
document()
check()
library(orf)
get_honest_c
document()
document()
document()
library(orf)
document()
library(orf)
document()
library(orf)
document()
check()
library(orf)
document()
document()
load_all()
document()
compileAttributes()
document()
compileAttributes()
pkgbuild::compile_dll()
document()
check()
library(orf)
timesTwo(3)
search()
document()
library("ranger", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
library(ranger)
check()
document()
document()
load_all()
document()
document()
document()
document()
document()
check()
library(orf)
document()
check()
library(orf)
# get some example data and parameters
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("sim_data.RData") # load generated data from ologit
X <- as.matrix(odata[, 2:16])
X_test <- as.matrix(odata_test[, 2:16])
Y <- as.matrix(odata[, 1])
ntree <- 1000
mtry <- 5
honesty <- FALSE
inference <- FALSE
margins <- FALSE
X
Y
ntree
## save the inputs:
inputs <- list(ntree, mtry, honesty, inference)
names(inputs) <- c("ntree", "mtry", "honesty", "inference")
## save colnames
# Y
if (is.null(colnames(Y))) { colnames(Y) <- "Y" } # check if Y has name
Y_name <- colnames(Y) # save the name of Y
Y <- as.numeric(Y) # numeric response as only regression is supported (so far)
# X
if (is.null(colnames(X))) { colnames(X) <- paste0("X", rep(1:ncol(X))) } # check if X has name
X_name <- colnames(X) # save the name of X
## set needed dataframe and local variables
dat <- as.data.frame(cbind(Y, X)) # dataframe
colnames(dat) <- c(Y_name, X_name) # column names
n <- nrow(dat) # number of observations
## do honest forest estimation here using 50:50 data split as in Lechner (2018)
# devide into 50:50 honesty sets
split_data <- honest_split(dat)
honest_split <- function(data) {
# get number of observations in total
n <- nrow(data)
# needed inputs for the function: data - dataframe which should be split into 50:50 sets
ind <- sample(c(rep(0, n/2), rep(1, n/2))) # randomize indicators
honesty_i <- which(ind == 1) # indicator for whch observations go into train and honest set
train <- data[-honesty_i, ] # separate training set
#rownames(train) <- seq(1:nrow(train)) # set rownames
honest <- data[honesty_i, ] # separate honest set
#rownames(honest) <- seq(1:nrow(honest)) # set rownames
# put it into output
output <- list(train, honest)
names(output) <- c("trainData", "honestData")
# return output
return(output)
}
## do honest forest estimation here using 50:50 data split as in Lechner (2018)
# devide into 50:50 honesty sets
split_data <- honest_split(dat)
train_data <- split_data$trainData # take out training data
honest_data <- split_data$honestData # take out honest data
# built the forest structure using training set, i.e. place splits
forest         <- ranger(dependent.variable.name = paste(Y_name), data = train_data,
num.trees = ntree, mtry = mtry, replace = FALSE, sample.fraction = 0.5,
importance = "none")
# compute honest predictions
honest_pred <- get_honest(forest, honest_data, train_data)
honest_pred
document()
document()
library(devtools)
document()
check()
library(orf)
document()
check()
document()
check()
document()
check()
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("ranger")
library(devtools)
devtools::document()
devtools::check()
library("Matrix", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(orf)
detach("package:Matrix", unload=TRUE)
detach("package:ranger", unload=TRUE)
library("ranger", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
# get some example data and parameters
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("sim_data.RData") # load generated data from ologit
X <- as.matrix(odata[, 2:16])
X_test <- as.matrix(odata_test[, 2:16])
Y <- as.matrix(odata[, 1])
ntree <- 1000
mtry <- 5
honesty <- FALSE
inference <- FALSE
margins <- FALSE
## save the inputs:
inputs <- list(ntree, mtry, honesty, inference)
names(inputs) <- c("ntree", "mtry", "honesty", "inference")
## save colnames
# Y
if (is.null(colnames(Y))) { colnames(Y) <- "Y" } # check if Y has name
Y_name <- colnames(Y) # save the name of Y
Y <- as.numeric(Y) # numeric response as only regression is supported (so far)
# X
if (is.null(colnames(X))) { colnames(X) <- paste0("X", rep(1:ncol(X))) } # check if X has name
X_name <- colnames(X) # save the name of X
## set needed dataframe and local variables
dat <- as.data.frame(cbind(Y, X)) # dataframe
colnames(dat) <- c(Y_name, X_name) # column names
n <- nrow(dat) # number of observations
# -----------------------------------------
honest_split <- function(data) {
# get number of observations in total
n <- nrow(data)
# needed inputs for the function: data - dataframe which should be split into 50:50 sets
ind <- sample(c(rep(0, n/2), rep(1, n/2))) # randomize indicators
honesty_i <- which(ind == 1) # indicator for whch observations go into train and honest set
train <- data[-honesty_i, ] # separate training set
#rownames(train) <- seq(1:nrow(train)) # set rownames
honest <- data[honesty_i, ] # separate honest set
#rownames(honest) <- seq(1:nrow(honest)) # set rownames
# put it into output
output <- list(train, honest)
names(output) <- c("trainData", "honestData")
# return output
return(output)
}
# devide into 50:50 honesty sets
split_data <- honest_split(dat)
train_data <- split_data$trainData # take out training data
honest_data <- split_data$honestData # take out honest data
# built the forest structure using training set, i.e. place splits
forest         <- ranger(dependent.variable.name = paste(Y_name), data = train_data,
num.trees = ntree, mtry = mtry, replace = FALSE, sample.fraction = 0.5,
importance = "none")
detach("package:ranger", unload=TRUE)
# compute honest predictions
honest_pred <- get_honest(forest, honest_data, train_data)
honest_pred
save.image("~/Documents/HSG/ORF/all_functions/test_data.RData")
library("orf", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
?`orf-package`
load("~/Documents/HSG/ORF/all_functions/test_data.RData")
forest
honest_data
train_data
# compute honest predictions
honest_pred <- get_honest(forest, honest_data, train_data)
honest_pred
rm(honest_pred)
# compute honest predictions
honest_pred <- get_honest(forest, honest_data, train_data)
honest_pred
rm(honest_pred)
honest_pred
# compute honest predictions
honest_pred <- get_honest(forest, honest_data, train_data)
honest_pred
library(devtools)
devtools::document()
devtools::check()
library(orf)
