check()
orf(X, Y, honesty = FALSE, replace = TRUE, inference = T)
expect_message(orf(X, Y, honesty = FALSE, replace = TRUE, inference = TRUE))
expect_message(orf(X, Y, honesty = FALSE, replace = FALSE, inference = TRUE))
expect_message(orf(X, Y, honesty = TRUE, replace = TRUE, inference = TRUE))
orf$trainForests
orf$trainForests
length(orf$trainForests)
orf <- orf(X, Y)
expect_type(length(orf$trainForests), length(unique(Y))-1)
expect_equal(length(orf$trainForests), length(unique(Y))-1)
orf$trainForests
orf$forestInfo
orf <- orf(X, Y)
expect_true(orf$MSE > 0)
expect_true(orf$RPS > 0)
orf$variableImportance
orf <- orf(X, Y, importance = T)
orf$variableImportance
orf <- orf(X, Y)
orf_margins <- margins(orf)
orf_margins
orf <- orf(X, Y)
orf_margins <- margins(orf)
expect_s3_class(orf_margins, "orf.margins")
expect_s3_class(orf_margins, "margins.orf")
typeof(orf_margins)
expect_type(orf_margins, "list")
rowSums(orf_margins$MarginalEffects)
as.numeric(rowSums(orf_margins$MarginalEffects))
ncol(X)
ep(0, ncol(X))
rep(0, ncol(X))
expect_equal(as.numeric(rowSums(orf_margins$MarginalEffects)), rep(0, ncol(X)))
orf_margins <- margins(orf)
expect_equal(as.numeric(rowSums(orf_margins$MarginalEffects)), rep(0, ncol(X)))
orf_margins
orf_margins$Variances
as.numeric(orf_margins$Variances)
orf_margins <- margins(orf, inference = TRUE)
as.numeric(orf_margins$Variances)
expect_true(all(as.numeric(orf_margins$Variances) > 0))
orf_margins$Variances
orf_margins$StandardErrors
expect_true(all(as.numeric(orf_margins$StandardErrors) > 0))
orf_margins$tValues
orf_margins$pValues
expect_true(all(as.numeric(orf_margins$pValues) > 0) & all(as.numeric(orf_margins$pValues) < 1))
expect_true(all(as.numeric(orf_margins$pValues) >= 0) & all(as.numeric(orf_margins$pValues) =< 1))
expect_true(all(as.numeric(orf_margins$pValues) >= 0) & all(as.numeric(orf_margins$pValues) <= 1))
orf_margins$MarginalEffects
orf_margins
expect_warning(margins(orf, eval = "something"))
orf <- orf(X, Y, honesty = FALSE, replace = TRUE)
orf <- orf(X, Y, honesty = FALSE, replace = TRUE)
expect_warning(margins(orf, inference = TRUE))
margins(orf, inference = TRUE)
orf <- orf(X, Y)
expect_warning(margins(orf, window = 2))
expect_error(margins(orf, window = 2))
document()
check()
library(orf)
document()
check()
document()
check()
library(orf)
document()
document()
check()
library(orf)
document()
check()
library(orf)
library(orf)
document()
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
library(orf)
library(devtools)
library(orf)
library(ranger)
data(odata)
Y <- odata[, 1]
X <- odata[, -1]
set.seed(123)
orf <- orf(X, Y)
print(orf)
summary(orf)
plot(orf)
predict(orf)
margins(orf)
library(ranger)
library(grf)
regression_forest(X,Y)
rf <- regression_forest(X,Y)
predict(rf)
ranger <- ranger(Y ~., data = odata)
ranger <- ranger(as.numeric(Y) ~., data = odata)
predict(ranger)
predict(ranger, data = odata)
ols <- lm(Y ~., data = odata)
ols
predict(ols)
predict(orf)
predict(orf)
kktko <- predict(orf)
kktko
forest_pred <- kktko
class(forest_pred )[1]
forest_pred$forestInfo$inputs
inputs$honesty
inputs            <- forest_pred$forestInfo$inputs
inputs$honesty
inputs$mtry
inputs$num.trees
inputs$min.node.size
inputs$replace
inputs$inference
forest$forestInfo$honestData
forest$forestInfo$trainData
forest_pred$newData
length(forest_pred$forestInfo$categories)
forest_pred$forestInfo$newData
ifelse(replace == TRUE, "Bootstrap", "Subsampling")
replace           <- inputs$replace
ifelse(replace == TRUE, "Bootstrap", "Subsampling")
forest_pred$forestPredictions
nrow(forest_pred$forestPredictions)
document()
check()
library(orf)
orf <- orf(X,Y)
orfpred <- predict(orf)
orfpred
orfpred <- predict(orf, newdata = X)
orfpred
orfpred <- predict(orf, newdata = X[1:10,])
orfpred
orfpred$forestPredictions
orfpred <- predict(orf, newdata = X)
orfpred$forestPredictions
document()
check()
library(orf)
document()
check()
document()
check()
library(orf)
kktko <- margins(orf)
kktko
kktko <- margins(orf, inference = T)
kktko
summary(kktko)
kktko
kktko$MarginalEffects
document()
check()
library(orf)
ols
ols$coefficients
summary(ols)
summary(orfpred)
kktko
kktko$Variances
print(kktko, latex = T)
kktko$MarginalEffects
load_all()
x <- kktko
# print inference output table
margins_output(x)
# print inference output table latex
margins_output_latex(x)
# print just the marginal effects
print(x$MarginalEffects)
# print marginal effects title
cat("ORF Marginal Effects: \n")
# print just the marginal effects
print(x$MarginalEffects)
# print inference output table latex
margins_output_latex(x)
# print inference output table
margins_output(x)
# print just the marginal effects
print(round(x$MarginalEffects), 4)
# print just the marginal effects
print(round(x$MarginalEffects, 4))
# print marginal effects title
cat("ORF Marginal Effects: \n")
# print just the marginal effects
print(round(x$MarginalEffects, 4))
ols$coefficients
ols
document()
check()
library(orf)
orfpred
orfpred$forestInfo
summary(orf)
document()
check()
document()
check()
library(orf)
orf
orfpred
summary(orf)
summary(orfpred)
margins(orf)
orfmarg <- margins(orf)
summary(orfmarg)
summary(orfmarg, latex = T)
orf_margins
orf_margins <- orfmarg
# put caption an latex environment
xoutput <- xtable(orf_margins$MarginalEffects, digits = 4, caption = "ORF Marginal Effects")
library(xtable)
# put caption an latex environment
xoutput <- xtable(orf_margins$MarginalEffects, digits = 4, caption = "ORF Marginal Effects")
# put hline after each variable
print.xtable(xoutput, type = "latex", include.rownames = TRUE, comment = FALSE)
document()
check()
library(orf)
orf
orfpred
orfmarg
## save forest prediction inputs
main_class  <- class(orf_margins)[1]
main_class
document()
check()
library(orf)
orf_margins <- margins(orf)
orf_margins
orf_margins$Variances
orf_margins$forestInfo
load_all()
# print inference output table
margins_output(orf_margins)
orf_margins
x <- orf_margins
output_matrix <- matrix(NA, nrow = 1, ncol = 4)
output_matrix
cat("ORF Marginal Effects: \n\n")
cat("---------------------------------------------------------------------------------", "\n")
for (var_idx in 1:nrow(x$MarginalEffects)) {
cat(rownames(x$MarginalEffects)[var_idx], "\n")
cat("                    Cat ", "     Effect", "    StdDev", "    tValue ", "   pValue", "     ", "\n")
for (cat_idx in 1:ncol(x$MarginalEffects)) {
# generate stars (thanks to:
# http://myowelt.blogspot.com/2008/04/beautiful-correlation-tables-in-r.html)
stars <- ifelse(x$pValues[var_idx, cat_idx] < .01, "***",
ifelse(x$pValues[var_idx, cat_idx] < .05, "** ",
ifelse(x$pValues[var_idx, cat_idx] < .1, "*  ", "   ")))
# print estimates for each category iteratively
output_matrix[1, 1] <- x$MarginalEffects[var_idx, cat_idx]
output_matrix[1, 2] <- x$StandardErrors[var_idx, cat_idx]
output_matrix[1, 3] <- x$tValues[var_idx, cat_idx]
output_matrix[1, 4] <- x$pValues[var_idx, cat_idx]
cat("                 |  ", cat_idx, "  |  ") # prit out the categories
cat(format(sprintf("%8.4f", round(output_matrix, 4)), width = 10), stars, "  |  ") # print out the estimates
cat("\n") # break the line
}
}
1:nrow(x$MarginalEffects)
var_idx <- 1
cat(rownames(x$MarginalEffects)[var_idx], "\n")
cat("                    Cat ", "     Effect", "    StdDev", "    tValue ", "   pValue", "     ", "\n")
1:ncol(x$MarginalEffects)
cat_idx <- 1
# generate stars (thanks to:
# http://myowelt.blogspot.com/2008/04/beautiful-correlation-tables-in-r.html)
stars <- ifelse(x$pValues[var_idx, cat_idx] < .01, "***",
ifelse(x$pValues[var_idx, cat_idx] < .05, "** ",
ifelse(x$pValues[var_idx, cat_idx] < .1, "*  ", "   ")))
# print estimates for each category iteratively
output_matrix[1, 1] <- x$MarginalEffects[var_idx, cat_idx]
output_matrix[1, 2] <- x$StandardErrors[var_idx, cat_idx]
# put caption an latex environment
xoutput <- xtable(orf_margins$MarginalEffects, digits = 4, caption = "ORF Marginal Effects")
# put hline after each variable
print.xtable(xoutput, type = "latex", include.rownames = TRUE, comment = FALSE)
# print marginal effects title
cat("ORF Marginal Effects: \n\n")
# print just the marginal effects
print(round(orf_margins$MarginalEffects, 4))
orf_margins
## save forest prediction inputs
main_class        <- class(orf_margins)[1]
type              <- "Ordered Forest Margins"
orf_margins$forestInfo$inputs
inputs            <- orf_margins$forestInfo$inputs
type              <- "Ordered Forest Margins"
honesty           <- inputs$honesty
mtry              <- inputs$mtry
num.trees         <- inputs$num.trees
min.node.size     <- inputs$min.node.size
replace           <- inputs$replace
inference         <- inputs$inference
orf_margins$forestInfo$newData
orf_margins$forestInfo$newData
pred_data         <- orf_margins$forestInfo$newData
eval_type         <- orf_margins$forestInfo$eval
eval_window       <- orf_margins$forestInfo$window
margins_inference <- orf_margins$forestInfo$marginsInference
categories        <- length(orf_margins$forestInfo$categories)
build             <- ifelse(replace == TRUE, "Bootstrap", "Subsampling")
cat(type, "object of class", main_class, "\n\n")
eval_type
orf_margins$forestInfo$newData
ifelse(is.null(pred_data), FALSE, TRUE)
document()
check()
library(orf)
orf_margins
orf_margins
orfpred
orf
summary(orf)
summary(orfpred)
summary(orf_margins)
orf_margins
## save forest margins inputs
main_class        <- class(orf_margins)[1]
main_class
inputs            <- orf_margins$forestInfo$inputs
inputs
honesty           <- inputs$honesty
honesty.fraction  <- inputs$honesty.fraction
mtry              <- inputs$mtry
num.trees         <- inputs$num.trees
min.node.size     <- inputs$min.node.size
replace           <- inputs$replace
sample.fraction   <- inputs$sample.fraction
inference         <- inputs$inference
pred_data         <- orf_margins$forestInfo$newData
eval_type         <- orf_margins$forestInfo$eval
eval_window       <- orf_margins$forestInfo$window
margins_inference <- orf_margins$forestInfo$marginsInference
categories        <- length(orf_margins$forestInfo$categories)
sample_size       <- nrow(orf_margins$forestPredictions)
sample_size
margins_inference
document()
check()
type
eval_type
eval_window
pred_data
# structure summary into a list
output        <- list(type, eval_type, eval_window, pred_data, categories, build, num.trees, mtry, min.node.size, replace, sample.fraction, honesty, honesty.fraction, margins_inference)
names(output) <- c("type", "evaluation.type", "evaluation.window", "new.data", "categories", "build", "num.trees", "mtry", "min.node.size", "replace", "sample.fraction", "honesty", "honesty.fraction", "inference")
output
# output matrix
output_matrix <- matrix(NA, ncol = 1, nrow = length(output))
output_matrix
# populate output matrix
rownames(output_matrix) <- names(output) # rownames are names
output_matrix
colnames(output_matrix) <- "" # no visible colname
output_matrix
unlist(output)
output_matrix[, 1]
pred_data         <- orf_margins$forestInfo$newData
# structure summary into a list
output        <- list(type, eval_type, eval_window, pred_data, categories, build, num.trees, mtry, min.node.size, replace, sample.fraction, honesty, honesty.fraction, margins_inference)
names(output) <- c("type", "evaluation.type", "evaluation.window", "new.data", "categories", "build", "num.trees", "mtry", "min.node.size", "replace", "sample.fraction", "honesty", "honesty.fraction", "inference")
# output matrix
output_matrix <- matrix(NA, ncol = 1, nrow = length(output))
# populate output matrix
rownames(output_matrix) <- names(output) # rownames are names
colnames(output_matrix) <- "" # no visible colname
output_matrix[, 1]
unlist(output)
output_matrix[, 1]      <- unlist(output) # column 1 are values
pred_data
document()
check()
library(orf)
summary(orf_margins)
summary(orf_margins, latex = T)
orf_margins <- margins(orf, inference = T)
summary(orf_margins)
summary(orf_margins, latex = T)
document()
check()
library(orf)
summary(orf_margins)
summary(orf_margins, latex = T)
orf_margins <- margins(orf)
summary(orf_margins)
summary(orf_margins, latex = T)
document()
check()
library(orf)
library(orf)
data <- odata
X <- data[, -1]
model.matrix(~.^2)
model.matrix(~.^2, data = X)
model.matrix(~.-1^2, data = X)
model.matrix(~.^2 - 1, data = X)
odara
odata
odata?
)
?odata
summary(orf, latex = TRUE)
set.seed(123)
orf <- orf(X, Y)
# load example data
data(odata)
# specify response and covariates
Y <- odata[, 1]
X <- odata[, -1]
set.seed(123)
orf <- orf(X, Y)
# print output of the orf estimation
print(orf)
set.seed(123)
orf <- orf(X, Y,
num.trees = 1000, mtry = 2, min.node.size = 5,
replace = FALSE, sample.fraction = 0.5,
honesty = TRUE, honesty.fraction = 0.5,
inference = FALSE, importance = FALSE)
# show summary of the orf estimation
summary(orf)
# show summary of the orf estimation
summary(orf, latex = TRUE)
## get forest as object
forest <- orf
## save forest inputs
main_class        <- class(forest)[1]
inputs            <- forest$forestInfo$inputs
honesty           <- inputs$honesty
honesty.fraction  <- inputs$honesty.fraction
inference         <- inputs$inference
importance        <- inputs$importance
mtry              <- inputs$mtry
num.trees         <- inputs$num.trees
min.node.size     <- inputs$min.node.size
replace           <- inputs$replace
sample.fraction   <- inputs$sample.fraction
honest_data       <- forest$forestInfo$honestData
train_data        <- forest$forestInfo$trainData
categories        <- length(forest$forestInfo$categories)
type              <- "Ordered Forest"
## honest splitting, i.e. use honest data
# take out summary statistics
mse         <- round(forest$MSE, 5)
rps         <- round(forest$RPS, 5)
trainsize   <- nrow(train_data)
honestsize  <- ifelse(is.null(honest_data), 0, nrow(honest_data))
features    <- ncol(train_data) - 1   # take out the response
# check if subsampling or bootstrapping was used
if (forest$trainForests[[1]]$replace == TRUE) { build <- "Bootstrap" } else { build <- "Subsampling" }
# structure summary into a list
output        <- list(type, categories, build, num.trees, mtry, min.node.size, replace, sample.fraction, honesty, honesty.fraction, inference, importance, trainsize, honestsize, features, mse, rps)
names(output) <- c("type", "categories", "build", "num.trees", "mtry", "min.node.size", "replace", "sample.fraction", "honesty", "honesty.fraction", "inference", "importance", "trainsize", "honestsize", "features", "mse", "rps")
# output matrix
output_matrix <- matrix(NA, ncol = 1, nrow = length(output))
# populate output matrix
rownames(output_matrix) <- names(output) # rownames are names
colnames(output_matrix) <- "" # no visible colname
output_matrix[, 1]      <- unlist(output) # column 1 are values
# generate html output
colnames(output_matrix) <- "Ordered Forest Summary"
output_matrix <- xtable(output_matrix, caption = "Summary of the Ordered Forest Estimation", align = "ll")
# pack it into output
output <- output_matrix
cat("Summary of the", type, "Estimation \n")
# return output
print(noquote(output), comment = FALSE, type = "html")
print(output)
print(output, type = "latex")
print(output, type = "html")
print(output)
output_matrix <- xtable(output_matrix, caption = "Summary of the Ordered Forest Estimation", align = "ll")
library(xtable)
output_matrix <- xtable(output_matrix, caption = "Summary of the Ordered Forest Estimation", align = "ll")
print(output_matrix)
print(output_matrix, type = "html")
library(devtools)
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
library(orf)
document()
check()
document()
check()
library(orf)
