% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orf.R, R/orf_user.R
\docType{package}
\name{orf}
\alias{orf}
\alias{orf-package}
\title{orf: An Implementation of the Ordered Random Forest Algorithm}
\usage{
orf(X, Y, num.trees = 1000, mtry = NULL, min.node.size = NULL,
  replace = FALSE, sample.fraction = NULL, honesty = TRUE,
  honesty.fraction = NULL, inference = FALSE, importance = FALSE)
}
\arguments{
\item{X}{matrix of features}

\item{Y}{vector of outcomes (as.matrix acceptable too)}

\item{num.trees}{scalar, number of trees in a forest, i.e. bootstrap replications (default is 1000 trees)}

\item{mtry}{scalar, number of randomly selected features (default is the squared root of number of features, rounded up to the nearest integer)}

\item{min.node.size}{scalar, minimum node size (default is 5 observations)}

\item{replace}{logical, if TRUE sampling with replacement, i.e. bootstrap is used to grow the trees, otherwise subsampling without replacement is used (default is set to FALSE)}

\item{sample.fraction}{scalar, subsampling rate (default is 1 for bootstrap and 0.5 for subsampling)}

\item{honesty}{logical, if TRUE honest forest is built using 50:50 data split (default is set to TRUE)}

\item{honesty.fraction}{scalar, share of observations belonging to honest sample not used for growing the forest (default is 0.5)}

\item{inference}{logical, if TRUE the weight based inference is conducted (default is set to FALSE)}

\item{importance}{logical, if TRUE variable importance measure based on permutation is conducted (default is set to FALSE)}
}
\value{
object of type \code{orf} with following elements
      \item{trainForests}{saved forests trained for ORF estimations (inherited from \code{ranger})}
      \item{forestInfo}{info containing forest inputs and data used}
      \item{forestPredictions}{predicted values}
      \item{forestVariances}{variances of predicted values}
      \item{variableImportance}{weighted measure of permutation based variable importance}
      \item{MSE}{in-sample mean squared error}
      \item{RPS}{in-sample ranked probability score}
}
\description{
An Implementation of the Ordered Random Forest Algorithm
as in Lechner & Okasa (2019) and other related estimators for
discrete choice models based on the random forest algorithm.
These include models with ordered, multinomial as well as binary
response. Standard random forest estimator for continuous response
is implemented, too. All the forest based algorithms rely on the
fast C++ forest implementation from the ranger package. Additionally
to common implementations the orf package provides functions for
estimating forest weights as well as marginal effects and thus
provides similar output as in standard econometric models for
ordered choice.

Ordered Forest for flexible estimation of the ordered choice model as developed in Lechner & Okasa (2019)
}
\examples{
\dontrun{

## 1) Ordered Forest with default settings
require(orf)

# load example data
data(odata)

# specify response and covariates
Y <- odata[, 1]
X <- odata[, -1]

# estimate Ordered Forest
set.seed(123)
orf <- orf(X, Y)

# print output of the orf estimation
print(orf)

# show summary of the orf estimation
summary(orf)

# plot the estimated probability distributions
plot(orf)

# predict with the estimated orf
predict(orf)

# estimate marginal effects of the orf
margins(orf)


require(orf)

# load example data
data(odata)

# specify response and covariates
Y <- odata[, 1]
X <- odata[, -1]

# estimate Ordered Forest
set.seed(123)
orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10,
 replace = TRUE, sample.fraction = 1, honesty = FALSE,
 honesty.fraction = 0, inference = FALSE, importance = FALSE)

 summary(orf)
}

}
\author{
Gabriel Okasa \email{gabriel.okasa@unisg.ch}
}
