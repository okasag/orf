% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orf.R, R/orf_user.R
\docType{package}
\name{orf}
\alias{orf}
\alias{orf-package}
\title{orf: An Implementation of the Ordered Forest Estimator}
\usage{
orf(X, Y, num.trees = 1000, mtry = NULL, min.node.size = NULL,
  replace = FALSE, sample.fraction = NULL, honesty = TRUE,
  honesty.fraction = NULL, inference = FALSE, importance = FALSE)
}
\arguments{
\item{X}{matrix of features}

\item{Y}{vector of outcomes (as.matrix acceptable too)}

\item{num.trees}{scalar, number of trees in a forest, i.e. bootstrap replications (default is 1000 trees)}

\item{mtry}{scalar, number of randomly selected features (default is the squared root of number of features, rounded up to the nearest integer)}

\item{min.node.size}{scalar, minimum node size (default is 5 observations)}

\item{replace}{logical, if TRUE sampling with replacement, i.e. bootstrap is used to grow the trees, otherwise subsampling without replacement is used (default is set to FALSE)}

\item{sample.fraction}{scalar, subsampling rate (default is 1 for bootstrap and 0.5 for subsampling)}

\item{honesty}{logical, if TRUE honest forest is built using 50:50 data split (default is set to TRUE)}

\item{honesty.fraction}{scalar, share of observations belonging to honest sample not used for growing the forest (default is 0.5)}

\item{inference}{logical, if TRUE the weight based inference is conducted (default is set to FALSE)}

\item{importance}{logical, if TRUE variable importance measure based on permutation is conducted (default is set to FALSE)}
}
\value{
object of type \code{orf} with following elements
      \item{trainForests}{saved forests trained for ORF estimations (inherited from \code{ranger})}
      \item{forestInfo}{info containing forest inputs and data used}
      \item{forestPredictions}{predicted values}
      \item{forestVariances}{variances of predicted values}
      \item{variableImportance}{weighted measure of permutation based variable importance}
      \item{MSE}{in-sample mean squared error}
      \item{RPS}{in-sample ranked probability score}
}
\description{
An implementation of the Ordered Forest estimator
as in Lechner & Okasa (2019). The Ordered Forest flexibly
estimates the conditional probabilities of models with ordered
categorical outcomes (so-called ordered choice models).
Additionally to common machine learning algorithms the orf
package provides functions for estimating marginal effects as well
as statistical inference thereof and thus provides similar output
as in standard econometric models for ordered choice. The core
forest algorithm relies on the fast C++ forest implementation
from the ranger package.

Ordered Forest for flexible estimation of the ordered choice model as developed in Lechner & Okasa (2019)
}
\examples{
#\dontrun{

## Ordered Forest
require(orf)

# load example data
data(odata)

# specify response and covariates
Y <- odata[, 1]
X <- odata[, -1]

## Main Example with all orf related functions
# estimate Ordered Forest with default settings
set.seed(123)
orf <- orf(X, Y)

# print output of the orf estimation
print(orf)

# show summary of the orf estimation
summary(orf)

# plot the estimated probability distributions
plot(orf)

# predict with the estimated orf
predict(orf)

# estimate marginal effects of the orf
margins(orf)

## Further Examples of orf
# estimate Ordered Forest with own tuning parameters
set.seed(123)
orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10)

# estimate Ordered Forest with bootstrapping and without honesty
set.seed(123)
orf <- orf(X, Y, replace = TRUE, honesty = FALSE)

# estimate Ordered Forest with subsampling and with honesty
set.seed(123)
orf <- orf(X, Y, replace = FALSE, honesty = TRUE)

# estimate Ordered Forest with subsampling and with honesty
# with own tuning for subsample fraction and honesty fraction
set.seed(123)
orf <- orf(X, Y, replace = FALSE, sample.fraction = 0.5, honesty = TRUE, honesty.fraction = 0.5)

# estimate Ordered Forest with subsampling and with honesty and with inference
# (for inference, subsampling and honesty are required)
set.seed(123)
orf <- orf(X, Y, replace = FALSE, honesty = TRUE, inference = TRUE)

# estimate Ordered Forest with simple variable importance measure
set.seed(123)
orf <- orf(X, Y, importance = TRUE)

# estimate Ordered Forest with all custom settings
set.seed(123)
orf <- orf(X, Y, num.trees = 2000, mtry = 3, min.node.size = 10,
 replace = TRUE, sample.fraction = 1, honesty = FALSE,
 honesty.fraction = 0, inference = FALSE, importance = FALSE)

#}

}
\references{
\itemize{
  \item Lechner, M. & Okasa, G. (2019). Random Forest Estimation of the Ordered Choice Model. Lechner, M., & Okasa, G. (2019). Random Forest Estimation of the Ordered Choice Model. arXiv preprint arXiv:1907.02436. \url{https://arxiv.org/abs/1907.02436}
  \item Goller, D., Knaus, M. C., Lechner, M., & Okasa, G. (2018). Predicting Match Outcomes in Football by an Ordered Forest Estimator (No. 1811). University of St. Gallen, School of Economics and Political Science. \url{http://ux-tauri.unisg.ch/RePEc/usg/econwp/EWP-1811.pdf}
  \item Wright, M. N. & Ziegler, A. (2017). ranger: A fast implementation of random forests for high dimensional data in C++ and R. J Stat Softw 77:1-17. \url{https://doi.org/10.18637/jss.v077.i01}.
}
}
\author{
Gabriel Okasa \email{gabriel.okasa@unisg.ch}
}
